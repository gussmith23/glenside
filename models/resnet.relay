#[version = "0.0.5"]
def @main(%data: Tensor[(8, 3, 32, 32), float32], %bn_data_gamma: Tensor[(3), float32], %bn_data_beta: Tensor[(3), float32], %bn_data_moving_mean: Tensor[(3), float32], %bn_data_moving_var: Tensor[(3), float32], %conv0_weight: Tensor[(64, 3, 3, 3), float32], %stage1_unit1_bn1_gamma: Tensor[(64), float32], %stage1_unit1_bn1_beta: Tensor[(64), float32], %stage1_unit1_bn1_moving_mean: Tensor[(64), float32], %stage1_unit1_bn1_moving_var: Tensor[(64), float32], %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit1_bn2_gamma: Tensor[(64), float32], %stage1_unit1_bn2_beta: Tensor[(64), float32], %stage1_unit1_bn2_moving_mean: Tensor[(64), float32], %stage1_unit1_bn2_moving_var: Tensor[(64), float32], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), float32], %stage1_unit2_bn1_gamma: Tensor[(64), float32], %stage1_unit2_bn1_beta: Tensor[(64), float32], %stage1_unit2_bn1_moving_mean: Tensor[(64), float32], %stage1_unit2_bn1_moving_var: Tensor[(64), float32], %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit2_bn2_gamma: Tensor[(64), float32], %stage1_unit2_bn2_beta: Tensor[(64), float32], %stage1_unit2_bn2_moving_mean: Tensor[(64), float32], %stage1_unit2_bn2_moving_var: Tensor[(64), float32], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage2_unit1_bn1_gamma: Tensor[(64), float32], %stage2_unit1_bn1_beta: Tensor[(64), float32], %stage2_unit1_bn1_moving_mean: Tensor[(64), float32], %stage2_unit1_bn1_moving_var: Tensor[(64), float32], %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), float32], %stage2_unit1_bn2_gamma: Tensor[(128), float32], %stage2_unit1_bn2_beta: Tensor[(128), float32], %stage2_unit1_bn2_moving_mean: Tensor[(128), float32], %stage2_unit1_bn2_moving_var: Tensor[(128), float32], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), float32], %stage2_unit2_bn1_gamma: Tensor[(128), float32], %stage2_unit2_bn1_beta: Tensor[(128), float32], %stage2_unit2_bn1_moving_mean: Tensor[(128), float32], %stage2_unit2_bn1_moving_var: Tensor[(128), float32], %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit2_bn2_gamma: Tensor[(128), float32], %stage2_unit2_bn2_beta: Tensor[(128), float32], %stage2_unit2_bn2_moving_mean: Tensor[(128), float32], %stage2_unit2_bn2_moving_var: Tensor[(128), float32], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage3_unit1_bn1_gamma: Tensor[(128), float32], %stage3_unit1_bn1_beta: Tensor[(128), float32], %stage3_unit1_bn1_moving_mean: Tensor[(128), float32], %stage3_unit1_bn1_moving_var: Tensor[(128), float32], %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), float32], %stage3_unit1_bn2_gamma: Tensor[(256), float32], %stage3_unit1_bn2_beta: Tensor[(256), float32], %stage3_unit1_bn2_moving_mean: Tensor[(256), float32], %stage3_unit1_bn2_moving_var: Tensor[(256), float32], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), float32], %stage3_unit2_bn1_gamma: Tensor[(256), float32], %stage3_unit2_bn1_beta: Tensor[(256), float32], %stage3_unit2_bn1_moving_mean: Tensor[(256), float32], %stage3_unit2_bn1_moving_var: Tensor[(256), float32], %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit2_bn2_gamma: Tensor[(256), float32], %stage3_unit2_bn2_beta: Tensor[(256), float32], %stage3_unit2_bn2_moving_mean: Tensor[(256), float32], %stage3_unit2_bn2_moving_var: Tensor[(256), float32], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage4_unit1_bn1_gamma: Tensor[(256), float32], %stage4_unit1_bn1_beta: Tensor[(256), float32], %stage4_unit1_bn1_moving_mean: Tensor[(256), float32], %stage4_unit1_bn1_moving_var: Tensor[(256), float32], %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), float32], %stage4_unit1_bn2_gamma: Tensor[(512), float32], %stage4_unit1_bn2_beta: Tensor[(512), float32], %stage4_unit1_bn2_moving_mean: Tensor[(512), float32], %stage4_unit1_bn2_moving_var: Tensor[(512), float32], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), float32], %stage4_unit2_bn1_gamma: Tensor[(512), float32], %stage4_unit2_bn1_beta: Tensor[(512), float32], %stage4_unit2_bn1_moving_mean: Tensor[(512), float32], %stage4_unit2_bn1_moving_var: Tensor[(512), float32], %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit2_bn2_gamma: Tensor[(512), float32], %stage4_unit2_bn2_beta: Tensor[(512), float32], %stage4_unit2_bn2_moving_mean: Tensor[(512), float32], %stage4_unit2_bn2_moving_var: Tensor[(512), float32], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), float32], %bn1_gamma: Tensor[(512), float32], %bn1_beta: Tensor[(512), float32], %bn1_moving_mean: Tensor[(512), float32], %bn1_moving_var: Tensor[(512), float32], %fc1_weight: Tensor[(32, 512), float32], %fc1_bias: Tensor[(32), float32]) -> Tensor[(8, 32), float32] {
  %0 = add(%bn_data_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(3), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(3), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(3), float32] */;
  %3 = expand_dims(%2, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %4 = negative(%bn_data_moving_mean) /* ty=Tensor[(3), float32] */;
  %5 = multiply(%4, %2) /* ty=Tensor[(3), float32] */;
  %6 = add(%5, %bn_data_beta) /* ty=Tensor[(3), float32] */;
  %7 = multiply(%data, %3) /* ty=Tensor[(8, 3, 32, 32), float32] */;
  %8 = expand_dims(%6, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %9 = add(%7, %8) /* ty=Tensor[(8, 3, 32, 32), float32] */;
  %10 = add(%stage1_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %11 = sqrt(%10) /* ty=Tensor[(64), float32] */;
  %12 = divide(1f /* ty=float32 */, %11) /* ty=Tensor[(64), float32] */;
  %13 = multiply(%12, %stage1_unit1_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %14 = nn.conv2d(%9, %conv0_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %15 = expand_dims(%13, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %16 = negative(%stage1_unit1_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %17 = multiply(%16, %13) /* ty=Tensor[(64), float32] */;
  %18 = add(%17, %stage1_unit1_bn1_beta) /* ty=Tensor[(64), float32] */;
  %19 = multiply(%14, %15) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %20 = expand_dims(%18, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %21 = add(%19, %20) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %22 = nn.relu(%21) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %23 = add(%stage1_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %24 = sqrt(%23) /* ty=Tensor[(64), float32] */;
  %25 = divide(1f /* ty=float32 */, %24) /* ty=Tensor[(64), float32] */;
  %26 = multiply(%25, %stage1_unit1_bn2_gamma) /* ty=Tensor[(64), float32] */;
  %27 = nn.conv2d(%22, %stage1_unit1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %28 = expand_dims(%26, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %29 = negative(%stage1_unit1_bn2_moving_mean) /* ty=Tensor[(64), float32] */;
  %30 = multiply(%29, %26) /* ty=Tensor[(64), float32] */;
  %31 = add(%30, %stage1_unit1_bn2_beta) /* ty=Tensor[(64), float32] */;
  %32 = multiply(%27, %28) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %33 = expand_dims(%31, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %34 = add(%32, %33) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %35 = nn.relu(%34) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %36 = nn.conv2d(%35, %stage1_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %37 = nn.conv2d(%22, %stage1_unit1_sc_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %38 = add(%stage1_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %39 = sqrt(%38) /* ty=Tensor[(64), float32] */;
  %40 = divide(1f /* ty=float32 */, %39) /* ty=Tensor[(64), float32] */;
  %41 = multiply(%40, %stage1_unit2_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %42 = add(%36, %37) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %43 = expand_dims(%41, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %44 = negative(%stage1_unit2_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %45 = multiply(%44, %41) /* ty=Tensor[(64), float32] */;
  %46 = add(%45, %stage1_unit2_bn1_beta) /* ty=Tensor[(64), float32] */;
  %47 = multiply(%42, %43) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %48 = expand_dims(%46, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %49 = add(%47, %48) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %50 = nn.relu(%49) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %51 = add(%stage1_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %52 = sqrt(%51) /* ty=Tensor[(64), float32] */;
  %53 = divide(1f /* ty=float32 */, %52) /* ty=Tensor[(64), float32] */;
  %54 = multiply(%53, %stage1_unit2_bn2_gamma) /* ty=Tensor[(64), float32] */;
  %55 = nn.conv2d(%50, %stage1_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %56 = expand_dims(%54, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %57 = negative(%stage1_unit2_bn2_moving_mean) /* ty=Tensor[(64), float32] */;
  %58 = multiply(%57, %54) /* ty=Tensor[(64), float32] */;
  %59 = add(%58, %stage1_unit2_bn2_beta) /* ty=Tensor[(64), float32] */;
  %60 = multiply(%55, %56) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %61 = expand_dims(%59, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %62 = add(%60, %61) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %63 = nn.relu(%62) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %64 = nn.conv2d(%63, %stage1_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %65 = add(%stage2_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(64), float32] */;
  %67 = divide(1f /* ty=float32 */, %66) /* ty=Tensor[(64), float32] */;
  %68 = multiply(%67, %stage2_unit1_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %69 = add(%64, %42) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %70 = expand_dims(%68, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %71 = negative(%stage2_unit1_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %72 = multiply(%71, %68) /* ty=Tensor[(64), float32] */;
  %73 = add(%72, %stage2_unit1_bn1_beta) /* ty=Tensor[(64), float32] */;
  %74 = multiply(%69, %70) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %75 = expand_dims(%73, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %76 = add(%74, %75) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %77 = nn.relu(%76) /* ty=Tensor[(8, 64, 32, 32), float32] */;
  %78 = add(%stage2_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %79 = sqrt(%78) /* ty=Tensor[(128), float32] */;
  %80 = divide(1f /* ty=float32 */, %79) /* ty=Tensor[(128), float32] */;
  %81 = multiply(%80, %stage2_unit1_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %82 = nn.conv2d(%77, %stage2_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %83 = expand_dims(%81, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %84 = negative(%stage2_unit1_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %85 = multiply(%84, %81) /* ty=Tensor[(128), float32] */;
  %86 = add(%85, %stage2_unit1_bn2_beta) /* ty=Tensor[(128), float32] */;
  %87 = multiply(%82, %83) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %88 = expand_dims(%86, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %89 = add(%87, %88) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %90 = nn.relu(%89) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %91 = nn.conv2d(%90, %stage2_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %92 = nn.conv2d(%77, %stage2_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %93 = add(%stage2_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %94 = sqrt(%93) /* ty=Tensor[(128), float32] */;
  %95 = divide(1f /* ty=float32 */, %94) /* ty=Tensor[(128), float32] */;
  %96 = multiply(%95, %stage2_unit2_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %97 = add(%91, %92) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %98 = expand_dims(%96, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %99 = negative(%stage2_unit2_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %100 = multiply(%99, %96) /* ty=Tensor[(128), float32] */;
  %101 = add(%100, %stage2_unit2_bn1_beta) /* ty=Tensor[(128), float32] */;
  %102 = multiply(%97, %98) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %103 = expand_dims(%101, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %104 = add(%102, %103) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %105 = nn.relu(%104) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %106 = add(%stage2_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %107 = sqrt(%106) /* ty=Tensor[(128), float32] */;
  %108 = divide(1f /* ty=float32 */, %107) /* ty=Tensor[(128), float32] */;
  %109 = multiply(%108, %stage2_unit2_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %110 = nn.conv2d(%105, %stage2_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %111 = expand_dims(%109, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %112 = negative(%stage2_unit2_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %113 = multiply(%112, %109) /* ty=Tensor[(128), float32] */;
  %114 = add(%113, %stage2_unit2_bn2_beta) /* ty=Tensor[(128), float32] */;
  %115 = multiply(%110, %111) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %116 = expand_dims(%114, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %117 = add(%115, %116) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %118 = nn.relu(%117) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %119 = nn.conv2d(%118, %stage2_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %120 = add(%stage3_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %121 = sqrt(%120) /* ty=Tensor[(128), float32] */;
  %122 = divide(1f /* ty=float32 */, %121) /* ty=Tensor[(128), float32] */;
  %123 = multiply(%122, %stage3_unit1_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %124 = add(%119, %97) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %125 = expand_dims(%123, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %126 = negative(%stage3_unit1_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %127 = multiply(%126, %123) /* ty=Tensor[(128), float32] */;
  %128 = add(%127, %stage3_unit1_bn1_beta) /* ty=Tensor[(128), float32] */;
  %129 = multiply(%124, %125) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %130 = expand_dims(%128, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %131 = add(%129, %130) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %132 = nn.relu(%131) /* ty=Tensor[(8, 128, 16, 16), float32] */;
  %133 = add(%stage3_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %134 = sqrt(%133) /* ty=Tensor[(256), float32] */;
  %135 = divide(1f /* ty=float32 */, %134) /* ty=Tensor[(256), float32] */;
  %136 = multiply(%135, %stage3_unit1_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %137 = nn.conv2d(%132, %stage3_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %138 = expand_dims(%136, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %139 = negative(%stage3_unit1_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %140 = multiply(%139, %136) /* ty=Tensor[(256), float32] */;
  %141 = add(%140, %stage3_unit1_bn2_beta) /* ty=Tensor[(256), float32] */;
  %142 = multiply(%137, %138) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %143 = expand_dims(%141, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %144 = add(%142, %143) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %145 = nn.relu(%144) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %146 = nn.conv2d(%145, %stage3_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %147 = nn.conv2d(%132, %stage3_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %148 = add(%stage3_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %149 = sqrt(%148) /* ty=Tensor[(256), float32] */;
  %150 = divide(1f /* ty=float32 */, %149) /* ty=Tensor[(256), float32] */;
  %151 = multiply(%150, %stage3_unit2_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %152 = add(%146, %147) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %153 = expand_dims(%151, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %154 = negative(%stage3_unit2_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %155 = multiply(%154, %151) /* ty=Tensor[(256), float32] */;
  %156 = add(%155, %stage3_unit2_bn1_beta) /* ty=Tensor[(256), float32] */;
  %157 = multiply(%152, %153) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %158 = expand_dims(%156, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %159 = add(%157, %158) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %160 = nn.relu(%159) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %161 = add(%stage3_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %162 = sqrt(%161) /* ty=Tensor[(256), float32] */;
  %163 = divide(1f /* ty=float32 */, %162) /* ty=Tensor[(256), float32] */;
  %164 = multiply(%163, %stage3_unit2_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %165 = nn.conv2d(%160, %stage3_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %166 = expand_dims(%164, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %167 = negative(%stage3_unit2_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %168 = multiply(%167, %164) /* ty=Tensor[(256), float32] */;
  %169 = add(%168, %stage3_unit2_bn2_beta) /* ty=Tensor[(256), float32] */;
  %170 = multiply(%165, %166) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %171 = expand_dims(%169, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %172 = add(%170, %171) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %173 = nn.relu(%172) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %174 = nn.conv2d(%173, %stage3_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %175 = add(%stage4_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %176 = sqrt(%175) /* ty=Tensor[(256), float32] */;
  %177 = divide(1f /* ty=float32 */, %176) /* ty=Tensor[(256), float32] */;
  %178 = multiply(%177, %stage4_unit1_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %179 = add(%174, %152) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %180 = expand_dims(%178, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %181 = negative(%stage4_unit1_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %182 = multiply(%181, %178) /* ty=Tensor[(256), float32] */;
  %183 = add(%182, %stage4_unit1_bn1_beta) /* ty=Tensor[(256), float32] */;
  %184 = multiply(%179, %180) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %185 = expand_dims(%183, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %186 = add(%184, %185) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %187 = nn.relu(%186) /* ty=Tensor[(8, 256, 8, 8), float32] */;
  %188 = add(%stage4_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %189 = sqrt(%188) /* ty=Tensor[(512), float32] */;
  %190 = divide(1f /* ty=float32 */, %189) /* ty=Tensor[(512), float32] */;
  %191 = multiply(%190, %stage4_unit1_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %192 = nn.conv2d(%187, %stage4_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %193 = expand_dims(%191, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %194 = negative(%stage4_unit1_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %195 = multiply(%194, %191) /* ty=Tensor[(512), float32] */;
  %196 = add(%195, %stage4_unit1_bn2_beta) /* ty=Tensor[(512), float32] */;
  %197 = multiply(%192, %193) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %198 = expand_dims(%196, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %199 = add(%197, %198) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %200 = nn.relu(%199) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %201 = nn.conv2d(%200, %stage4_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %202 = nn.conv2d(%187, %stage4_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %203 = add(%stage4_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %204 = sqrt(%203) /* ty=Tensor[(512), float32] */;
  %205 = divide(1f /* ty=float32 */, %204) /* ty=Tensor[(512), float32] */;
  %206 = multiply(%205, %stage4_unit2_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %207 = add(%201, %202) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %208 = expand_dims(%206, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %209 = negative(%stage4_unit2_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %210 = multiply(%209, %206) /* ty=Tensor[(512), float32] */;
  %211 = add(%210, %stage4_unit2_bn1_beta) /* ty=Tensor[(512), float32] */;
  %212 = multiply(%207, %208) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %213 = expand_dims(%211, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %214 = add(%212, %213) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %215 = nn.relu(%214) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %216 = add(%stage4_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %217 = sqrt(%216) /* ty=Tensor[(512), float32] */;
  %218 = divide(1f /* ty=float32 */, %217) /* ty=Tensor[(512), float32] */;
  %219 = multiply(%218, %stage4_unit2_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %220 = nn.conv2d(%215, %stage4_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %221 = expand_dims(%219, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %222 = negative(%stage4_unit2_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %223 = multiply(%222, %219) /* ty=Tensor[(512), float32] */;
  %224 = add(%223, %stage4_unit2_bn2_beta) /* ty=Tensor[(512), float32] */;
  %225 = multiply(%220, %221) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %226 = expand_dims(%224, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %227 = add(%225, %226) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %228 = nn.relu(%227) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %229 = nn.conv2d(%228, %stage4_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %230 = add(%bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %231 = sqrt(%230) /* ty=Tensor[(512), float32] */;
  %232 = divide(1f /* ty=float32 */, %231) /* ty=Tensor[(512), float32] */;
  %233 = multiply(%232, %bn1_gamma) /* ty=Tensor[(512), float32] */;
  %234 = add(%229, %207) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %235 = expand_dims(%233, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %236 = negative(%bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %237 = multiply(%236, %233) /* ty=Tensor[(512), float32] */;
  %238 = add(%237, %bn1_beta) /* ty=Tensor[(512), float32] */;
  %239 = multiply(%234, %235) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %240 = expand_dims(%238, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %241 = add(%239, %240) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %242 = nn.relu(%241) /* ty=Tensor[(8, 512, 4, 4), float32] */;
  %243 = nn.global_avg_pool2d(%242) /* ty=Tensor[(8, 512, 1, 1), float32] */;
  %244 = nn.batch_flatten(%243) /* ty=Tensor[(8, 512), float32] */;
  %245 = nn.dense(%244, %fc1_weight, units=32) /* ty=Tensor[(8, 32), float32] */;
  %246 = nn.bias_add(%245, %fc1_bias, axis=-1) /* ty=Tensor[(8, 32), float32] */;
  nn.softmax(%246) /* ty=Tensor[(8, 32), float32] */
}
