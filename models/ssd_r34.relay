#[version = "0.0.5"]
def @main(%input0: Tensor[(1, 3, 1200, 1200), float32], %model_layer1_0_weight: Tensor[(64, 3, 7, 7), float32], %model_layer1_1_weight: Tensor[(64), float32], %model_layer1_1_bias: Tensor[(64), float32], %model_layer1_1_running_mean: Tensor[(64), float32], %model_layer1_1_running_var: Tensor[(64), float32], %model_layer1_4_0_conv1_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_0_bn1_weight: Tensor[(64), float32], %model_layer1_4_0_bn1_bias: Tensor[(64), float32], %model_layer1_4_0_bn1_running_mean: Tensor[(64), float32], %model_layer1_4_0_bn1_running_var: Tensor[(64), float32], %model_layer1_4_0_conv2_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_0_bn2_weight: Tensor[(64), float32], %model_layer1_4_0_bn2_bias: Tensor[(64), float32], %model_layer1_4_0_bn2_running_mean: Tensor[(64), float32], %model_layer1_4_0_bn2_running_var: Tensor[(64), float32], %model_layer1_4_1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_1_bn1_weight: Tensor[(64), float32], %model_layer1_4_1_bn1_bias: Tensor[(64), float32], %model_layer1_4_1_bn1_running_mean: Tensor[(64), float32], %model_layer1_4_1_bn1_running_var: Tensor[(64), float32], %model_layer1_4_1_conv2_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_1_bn2_weight: Tensor[(64), float32], %model_layer1_4_1_bn2_bias: Tensor[(64), float32], %model_layer1_4_1_bn2_running_mean: Tensor[(64), float32], %model_layer1_4_1_bn2_running_var: Tensor[(64), float32], %model_layer1_4_2_conv1_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_2_bn1_weight: Tensor[(64), float32], %model_layer1_4_2_bn1_bias: Tensor[(64), float32], %model_layer1_4_2_bn1_running_mean: Tensor[(64), float32], %model_layer1_4_2_bn1_running_var: Tensor[(64), float32], %model_layer1_4_2_conv2_weight: Tensor[(64, 64, 3, 3), float32], %model_layer1_4_2_bn2_weight: Tensor[(64), float32], %model_layer1_4_2_bn2_bias: Tensor[(64), float32], %model_layer1_4_2_bn2_running_mean: Tensor[(64), float32], %model_layer1_4_2_bn2_running_var: Tensor[(64), float32], %model_layer1_5_0_conv1_weight: Tensor[(128, 64, 3, 3), float32], %model_layer1_5_0_bn1_weight: Tensor[(128), float32], %model_layer1_5_0_bn1_bias: Tensor[(128), float32], %model_layer1_5_0_bn1_running_mean: Tensor[(128), float32], %model_layer1_5_0_bn1_running_var: Tensor[(128), float32], %model_layer1_5_0_conv2_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_0_bn2_weight: Tensor[(128), float32], %model_layer1_5_0_bn2_bias: Tensor[(128), float32], %model_layer1_5_0_bn2_running_mean: Tensor[(128), float32], %model_layer1_5_0_bn2_running_var: Tensor[(128), float32], %model_layer1_5_0_downsample_0_weight: Tensor[(128, 64, 1, 1), float32], %model_layer1_5_0_downsample_1_weight: Tensor[(128), float32], %model_layer1_5_0_downsample_1_bias: Tensor[(128), float32], %model_layer1_5_0_downsample_1_running_mean: Tensor[(128), float32], %model_layer1_5_0_downsample_1_running_var: Tensor[(128), float32], %model_layer1_5_1_conv1_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_1_bn1_weight: Tensor[(128), float32], %model_layer1_5_1_bn1_bias: Tensor[(128), float32], %model_layer1_5_1_bn1_running_mean: Tensor[(128), float32], %model_layer1_5_1_bn1_running_var: Tensor[(128), float32], %model_layer1_5_1_conv2_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_1_bn2_weight: Tensor[(128), float32], %model_layer1_5_1_bn2_bias: Tensor[(128), float32], %model_layer1_5_1_bn2_running_mean: Tensor[(128), float32], %model_layer1_5_1_bn2_running_var: Tensor[(128), float32], %model_layer1_5_2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_2_bn1_weight: Tensor[(128), float32], %model_layer1_5_2_bn1_bias: Tensor[(128), float32], %model_layer1_5_2_bn1_running_mean: Tensor[(128), float32], %model_layer1_5_2_bn1_running_var: Tensor[(128), float32], %model_layer1_5_2_conv2_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_2_bn2_weight: Tensor[(128), float32], %model_layer1_5_2_bn2_bias: Tensor[(128), float32], %model_layer1_5_2_bn2_running_mean: Tensor[(128), float32], %model_layer1_5_2_bn2_running_var: Tensor[(128), float32], %model_layer1_5_3_conv1_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_3_bn1_weight: Tensor[(128), float32], %model_layer1_5_3_bn1_bias: Tensor[(128), float32], %model_layer1_5_3_bn1_running_mean: Tensor[(128), float32], %model_layer1_5_3_bn1_running_var: Tensor[(128), float32], %model_layer1_5_3_conv2_weight: Tensor[(128, 128, 3, 3), float32], %model_layer1_5_3_bn2_weight: Tensor[(128), float32], %model_layer1_5_3_bn2_bias: Tensor[(128), float32], %model_layer1_5_3_bn2_running_mean: Tensor[(128), float32], %model_layer1_5_3_bn2_running_var: Tensor[(128), float32], %model_layer2_0_0_conv1_weight: Tensor[(256, 128, 3, 3), float32], %model_layer2_0_0_bn1_weight: Tensor[(256), float32], %model_layer2_0_0_bn1_bias: Tensor[(256), float32], %model_layer2_0_0_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_0_bn1_running_var: Tensor[(256), float32], %model_layer2_0_0_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_0_bn2_weight: Tensor[(256), float32], %model_layer2_0_0_bn2_bias: Tensor[(256), float32], %model_layer2_0_0_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_0_bn2_running_var: Tensor[(256), float32], %model_layer2_0_0_downsample_0_weight: Tensor[(256, 128, 1, 1), float32], %model_layer2_0_0_downsample_1_weight: Tensor[(256), float32], %model_layer2_0_0_downsample_1_bias: Tensor[(256), float32], %model_layer2_0_0_downsample_1_running_mean: Tensor[(256), float32], %model_layer2_0_0_downsample_1_running_var: Tensor[(256), float32], %model_layer2_0_1_conv1_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_1_bn1_weight: Tensor[(256), float32], %model_layer2_0_1_bn1_bias: Tensor[(256), float32], %model_layer2_0_1_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_1_bn1_running_var: Tensor[(256), float32], %model_layer2_0_1_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_1_bn2_weight: Tensor[(256), float32], %model_layer2_0_1_bn2_bias: Tensor[(256), float32], %model_layer2_0_1_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_1_bn2_running_var: Tensor[(256), float32], %model_layer2_0_2_conv1_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_2_bn1_weight: Tensor[(256), float32], %model_layer2_0_2_bn1_bias: Tensor[(256), float32], %model_layer2_0_2_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_2_bn1_running_var: Tensor[(256), float32], %model_layer2_0_2_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_2_bn2_weight: Tensor[(256), float32], %model_layer2_0_2_bn2_bias: Tensor[(256), float32], %model_layer2_0_2_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_2_bn2_running_var: Tensor[(256), float32], %model_layer2_0_3_conv1_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_3_bn1_weight: Tensor[(256), float32], %model_layer2_0_3_bn1_bias: Tensor[(256), float32], %model_layer2_0_3_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_3_bn1_running_var: Tensor[(256), float32], %model_layer2_0_3_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_3_bn2_weight: Tensor[(256), float32], %model_layer2_0_3_bn2_bias: Tensor[(256), float32], %model_layer2_0_3_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_3_bn2_running_var: Tensor[(256), float32], %model_layer2_0_4_conv1_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_4_bn1_weight: Tensor[(256), float32], %model_layer2_0_4_bn1_bias: Tensor[(256), float32], %model_layer2_0_4_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_4_bn1_running_var: Tensor[(256), float32], %model_layer2_0_4_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_4_bn2_weight: Tensor[(256), float32], %model_layer2_0_4_bn2_bias: Tensor[(256), float32], %model_layer2_0_4_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_4_bn2_running_var: Tensor[(256), float32], %model_layer2_0_5_conv1_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_5_bn1_weight: Tensor[(256), float32], %model_layer2_0_5_bn1_bias: Tensor[(256), float32], %model_layer2_0_5_bn1_running_mean: Tensor[(256), float32], %model_layer2_0_5_bn1_running_var: Tensor[(256), float32], %model_layer2_0_5_conv2_weight: Tensor[(256, 256, 3, 3), float32], %model_layer2_0_5_bn2_weight: Tensor[(256), float32], %model_layer2_0_5_bn2_bias: Tensor[(256), float32], %model_layer2_0_5_bn2_running_mean: Tensor[(256), float32], %model_layer2_0_5_bn2_running_var: Tensor[(256), float32], %loc_0_weight: Tensor[(16, 256, 3, 3), float32], %loc_0_bias: Tensor[(16), float32], %additional_blocks_0_0_weight: Tensor[(256, 256, 1, 1), float32], %additional_blocks_0_0_bias: Tensor[(256), float32], %additional_blocks_0_2_weight: Tensor[(512, 256, 3, 3), float32], %additional_blocks_0_2_bias: Tensor[(512), float32], %loc_1_weight: Tensor[(24, 512, 3, 3), float32], %loc_1_bias: Tensor[(24), float32], %additional_blocks_1_0_weight: Tensor[(256, 512, 1, 1), float32], %additional_blocks_1_0_bias: Tensor[(256), float32], %additional_blocks_1_2_weight: Tensor[(512, 256, 3, 3), float32], %additional_blocks_1_2_bias: Tensor[(512), float32], %loc_2_weight: Tensor[(24, 512, 3, 3), float32], %loc_2_bias: Tensor[(24), float32], %additional_blocks_2_0_weight: Tensor[(128, 512, 1, 1), float32], %additional_blocks_2_0_bias: Tensor[(128), float32], %additional_blocks_2_2_weight: Tensor[(256, 128, 3, 3), float32], %additional_blocks_2_2_bias: Tensor[(256), float32], %loc_3_weight: Tensor[(24, 256, 3, 3), float32], %loc_3_bias: Tensor[(24), float32], %additional_blocks_3_0_weight: Tensor[(128, 256, 1, 1), float32], %additional_blocks_3_0_bias: Tensor[(128), float32], %additional_blocks_3_2_weight: Tensor[(256, 128, 3, 3), float32], %additional_blocks_3_2_bias: Tensor[(256), float32], %loc_4_weight: Tensor[(16, 256, 3, 3), float32], %loc_4_bias: Tensor[(16), float32], %additional_blocks_4_0_weight: Tensor[(128, 256, 1, 1), float32], %additional_blocks_4_0_bias: Tensor[(128), float32], %additional_blocks_4_2_weight: Tensor[(256, 128, 3, 3), float32], %additional_blocks_4_2_bias: Tensor[(256), float32], %loc_5_weight: Tensor[(16, 256, 3, 3), float32], %loc_5_bias: Tensor[(16), float32], %conf_0_weight: Tensor[(324, 256, 3, 3), float32], %conf_0_bias: Tensor[(324), float32], %conf_1_weight: Tensor[(486, 512, 3, 3), float32], %conf_1_bias: Tensor[(486), float32], %conf_2_weight: Tensor[(486, 512, 3, 3), float32], %conf_2_bias: Tensor[(486), float32], %conf_3_weight: Tensor[(486, 256, 3, 3), float32], %conf_3_bias: Tensor[(486), float32], %conf_4_weight: Tensor[(324, 256, 3, 3), float32], %conf_4_bias: Tensor[(324), float32], %conf_5_weight: Tensor[(324, 256, 3, 3), float32], %conf_5_bias: Tensor[(324), float32]) -> (Tensor[(1, 4, 15130), float32], Tensor[(1, 81, 15130), float32]) {
  %0 = add(%model_layer1_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(64), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(64), float32] */;
  %3 = multiply(%2, %model_layer1_1_weight) /* ty=Tensor[(64), float32] */;
  %4 = nn.conv2d(%input0, %model_layer1_0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* from_string */ /* ty=Tensor[(1, 64, 600, 600), float32] */;
  %5 = expand_dims(%3, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %6 = negative(%model_layer1_1_running_mean) /* ty=Tensor[(64), float32] */;
  %7 = multiply(%6, %3) /* ty=Tensor[(64), float32] */;
  %8 = add(%7, %model_layer1_1_bias) /* ty=Tensor[(64), float32] */;
  %9 = multiply(%4, %5) /* ty=Tensor[(1, 64, 600, 600), float32] */;
  %10 = expand_dims(%8, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %11 = add(%9, %10) /* ty=Tensor[(1, 64, 600, 600), float32] */;
  %12 = nn.relu(%11) /* from_string */ /* ty=Tensor[(1, 64, 600, 600), float32] */;
  %13 = nn.max_pool2d(%12, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %14 = add(%model_layer1_4_0_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %15 = sqrt(%14) /* ty=Tensor[(64), float32] */;
  %16 = divide(1f /* ty=float32 */, %15) /* ty=Tensor[(64), float32] */;
  %17 = multiply(%16, %model_layer1_4_0_bn1_weight) /* ty=Tensor[(64), float32] */;
  %18 = nn.conv2d(%13, %model_layer1_4_0_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %19 = expand_dims(%17, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %20 = negative(%model_layer1_4_0_bn1_running_mean) /* ty=Tensor[(64), float32] */;
  %21 = multiply(%20, %17) /* ty=Tensor[(64), float32] */;
  %22 = add(%21, %model_layer1_4_0_bn1_bias) /* ty=Tensor[(64), float32] */;
  %23 = multiply(%18, %19) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %24 = expand_dims(%22, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %25 = add(%23, %24) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %26 = nn.relu(%25) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %27 = add(%model_layer1_4_0_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %28 = sqrt(%27) /* ty=Tensor[(64), float32] */;
  %29 = divide(1f /* ty=float32 */, %28) /* ty=Tensor[(64), float32] */;
  %30 = multiply(%29, %model_layer1_4_0_bn2_weight) /* ty=Tensor[(64), float32] */;
  %31 = nn.conv2d(%26, %model_layer1_4_0_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %32 = expand_dims(%30, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %33 = negative(%model_layer1_4_0_bn2_running_mean) /* ty=Tensor[(64), float32] */;
  %34 = multiply(%33, %30) /* ty=Tensor[(64), float32] */;
  %35 = add(%34, %model_layer1_4_0_bn2_bias) /* ty=Tensor[(64), float32] */;
  %36 = multiply(%31, %32) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %37 = expand_dims(%35, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %38 = add(%36, %37) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %39 = add(%38, %13) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %40 = nn.relu(%39) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %41 = add(%model_layer1_4_1_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %42 = sqrt(%41) /* ty=Tensor[(64), float32] */;
  %43 = divide(1f /* ty=float32 */, %42) /* ty=Tensor[(64), float32] */;
  %44 = multiply(%43, %model_layer1_4_1_bn1_weight) /* ty=Tensor[(64), float32] */;
  %45 = nn.conv2d(%40, %model_layer1_4_1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %46 = expand_dims(%44, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %47 = negative(%model_layer1_4_1_bn1_running_mean) /* ty=Tensor[(64), float32] */;
  %48 = multiply(%47, %44) /* ty=Tensor[(64), float32] */;
  %49 = add(%48, %model_layer1_4_1_bn1_bias) /* ty=Tensor[(64), float32] */;
  %50 = multiply(%45, %46) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %51 = expand_dims(%49, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %52 = add(%50, %51) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %53 = nn.relu(%52) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %54 = add(%model_layer1_4_1_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %55 = sqrt(%54) /* ty=Tensor[(64), float32] */;
  %56 = divide(1f /* ty=float32 */, %55) /* ty=Tensor[(64), float32] */;
  %57 = multiply(%56, %model_layer1_4_1_bn2_weight) /* ty=Tensor[(64), float32] */;
  %58 = nn.conv2d(%53, %model_layer1_4_1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %59 = expand_dims(%57, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %60 = negative(%model_layer1_4_1_bn2_running_mean) /* ty=Tensor[(64), float32] */;
  %61 = multiply(%60, %57) /* ty=Tensor[(64), float32] */;
  %62 = add(%61, %model_layer1_4_1_bn2_bias) /* ty=Tensor[(64), float32] */;
  %63 = multiply(%58, %59) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %64 = expand_dims(%62, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %65 = add(%63, %64) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %66 = add(%65, %40) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %67 = nn.relu(%66) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %68 = add(%model_layer1_4_2_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %69 = sqrt(%68) /* ty=Tensor[(64), float32] */;
  %70 = divide(1f /* ty=float32 */, %69) /* ty=Tensor[(64), float32] */;
  %71 = multiply(%70, %model_layer1_4_2_bn1_weight) /* ty=Tensor[(64), float32] */;
  %72 = nn.conv2d(%67, %model_layer1_4_2_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %73 = expand_dims(%71, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %74 = negative(%model_layer1_4_2_bn1_running_mean) /* ty=Tensor[(64), float32] */;
  %75 = multiply(%74, %71) /* ty=Tensor[(64), float32] */;
  %76 = add(%75, %model_layer1_4_2_bn1_bias) /* ty=Tensor[(64), float32] */;
  %77 = multiply(%72, %73) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %78 = expand_dims(%76, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %79 = add(%77, %78) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %80 = nn.relu(%79) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %81 = add(%model_layer1_4_2_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %82 = sqrt(%81) /* ty=Tensor[(64), float32] */;
  %83 = divide(1f /* ty=float32 */, %82) /* ty=Tensor[(64), float32] */;
  %84 = multiply(%83, %model_layer1_4_2_bn2_weight) /* ty=Tensor[(64), float32] */;
  %85 = nn.conv2d(%80, %model_layer1_4_2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %86 = expand_dims(%84, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %87 = negative(%model_layer1_4_2_bn2_running_mean) /* ty=Tensor[(64), float32] */;
  %88 = multiply(%87, %84) /* ty=Tensor[(64), float32] */;
  %89 = add(%88, %model_layer1_4_2_bn2_bias) /* ty=Tensor[(64), float32] */;
  %90 = multiply(%85, %86) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %91 = expand_dims(%89, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %92 = add(%90, %91) /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %93 = add(%92, %67) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %94 = nn.relu(%93) /* from_string */ /* ty=Tensor[(1, 64, 300, 300), float32] */;
  %95 = add(%model_layer1_5_0_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %96 = sqrt(%95) /* ty=Tensor[(128), float32] */;
  %97 = divide(1f /* ty=float32 */, %96) /* ty=Tensor[(128), float32] */;
  %98 = multiply(%97, %model_layer1_5_0_bn1_weight) /* ty=Tensor[(128), float32] */;
  %99 = nn.conv2d(%94, %model_layer1_5_0_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %100 = expand_dims(%98, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %101 = negative(%model_layer1_5_0_bn1_running_mean) /* ty=Tensor[(128), float32] */;
  %102 = multiply(%101, %98) /* ty=Tensor[(128), float32] */;
  %103 = add(%102, %model_layer1_5_0_bn1_bias) /* ty=Tensor[(128), float32] */;
  %104 = multiply(%99, %100) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %105 = expand_dims(%103, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %106 = add(%104, %105) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %107 = nn.relu(%106) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %108 = add(%model_layer1_5_0_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %109 = sqrt(%108) /* ty=Tensor[(128), float32] */;
  %110 = divide(1f /* ty=float32 */, %109) /* ty=Tensor[(128), float32] */;
  %111 = multiply(%110, %model_layer1_5_0_bn2_weight) /* ty=Tensor[(128), float32] */;
  %112 = nn.conv2d(%107, %model_layer1_5_0_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %113 = expand_dims(%111, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %114 = negative(%model_layer1_5_0_bn2_running_mean) /* ty=Tensor[(128), float32] */;
  %115 = multiply(%114, %111) /* ty=Tensor[(128), float32] */;
  %116 = add(%115, %model_layer1_5_0_bn2_bias) /* ty=Tensor[(128), float32] */;
  %117 = multiply(%112, %113) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %118 = expand_dims(%116, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %119 = add(%model_layer1_5_0_downsample_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %120 = sqrt(%119) /* ty=Tensor[(128), float32] */;
  %121 = divide(1f /* ty=float32 */, %120) /* ty=Tensor[(128), float32] */;
  %122 = multiply(%121, %model_layer1_5_0_downsample_1_weight) /* ty=Tensor[(128), float32] */;
  %123 = nn.conv2d(%94, %model_layer1_5_0_downsample_0_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %124 = expand_dims(%122, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %125 = negative(%model_layer1_5_0_downsample_1_running_mean) /* ty=Tensor[(128), float32] */;
  %126 = multiply(%125, %122) /* ty=Tensor[(128), float32] */;
  %127 = add(%126, %model_layer1_5_0_downsample_1_bias) /* ty=Tensor[(128), float32] */;
  %128 = multiply(%123, %124) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %129 = expand_dims(%127, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %130 = add(%117, %118) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %131 = add(%128, %129) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %132 = add(%130, %131) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %133 = nn.relu(%132) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %134 = add(%model_layer1_5_1_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %135 = sqrt(%134) /* ty=Tensor[(128), float32] */;
  %136 = divide(1f /* ty=float32 */, %135) /* ty=Tensor[(128), float32] */;
  %137 = multiply(%136, %model_layer1_5_1_bn1_weight) /* ty=Tensor[(128), float32] */;
  %138 = nn.conv2d(%133, %model_layer1_5_1_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %139 = expand_dims(%137, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %140 = negative(%model_layer1_5_1_bn1_running_mean) /* ty=Tensor[(128), float32] */;
  %141 = multiply(%140, %137) /* ty=Tensor[(128), float32] */;
  %142 = add(%141, %model_layer1_5_1_bn1_bias) /* ty=Tensor[(128), float32] */;
  %143 = multiply(%138, %139) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %144 = expand_dims(%142, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %145 = add(%143, %144) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %146 = nn.relu(%145) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %147 = add(%model_layer1_5_1_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %148 = sqrt(%147) /* ty=Tensor[(128), float32] */;
  %149 = divide(1f /* ty=float32 */, %148) /* ty=Tensor[(128), float32] */;
  %150 = multiply(%149, %model_layer1_5_1_bn2_weight) /* ty=Tensor[(128), float32] */;
  %151 = nn.conv2d(%146, %model_layer1_5_1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %152 = expand_dims(%150, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %153 = negative(%model_layer1_5_1_bn2_running_mean) /* ty=Tensor[(128), float32] */;
  %154 = multiply(%153, %150) /* ty=Tensor[(128), float32] */;
  %155 = add(%154, %model_layer1_5_1_bn2_bias) /* ty=Tensor[(128), float32] */;
  %156 = multiply(%151, %152) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %157 = expand_dims(%155, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %158 = add(%156, %157) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %159 = add(%158, %133) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %160 = nn.relu(%159) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %161 = add(%model_layer1_5_2_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %162 = sqrt(%161) /* ty=Tensor[(128), float32] */;
  %163 = divide(1f /* ty=float32 */, %162) /* ty=Tensor[(128), float32] */;
  %164 = multiply(%163, %model_layer1_5_2_bn1_weight) /* ty=Tensor[(128), float32] */;
  %165 = nn.conv2d(%160, %model_layer1_5_2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %166 = expand_dims(%164, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %167 = negative(%model_layer1_5_2_bn1_running_mean) /* ty=Tensor[(128), float32] */;
  %168 = multiply(%167, %164) /* ty=Tensor[(128), float32] */;
  %169 = add(%168, %model_layer1_5_2_bn1_bias) /* ty=Tensor[(128), float32] */;
  %170 = multiply(%165, %166) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %171 = expand_dims(%169, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %172 = add(%170, %171) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %173 = nn.relu(%172) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %174 = add(%model_layer1_5_2_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %175 = sqrt(%174) /* ty=Tensor[(128), float32] */;
  %176 = divide(1f /* ty=float32 */, %175) /* ty=Tensor[(128), float32] */;
  %177 = multiply(%176, %model_layer1_5_2_bn2_weight) /* ty=Tensor[(128), float32] */;
  %178 = nn.conv2d(%173, %model_layer1_5_2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %179 = expand_dims(%177, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %180 = negative(%model_layer1_5_2_bn2_running_mean) /* ty=Tensor[(128), float32] */;
  %181 = multiply(%180, %177) /* ty=Tensor[(128), float32] */;
  %182 = add(%181, %model_layer1_5_2_bn2_bias) /* ty=Tensor[(128), float32] */;
  %183 = multiply(%178, %179) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %184 = expand_dims(%182, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %185 = add(%183, %184) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %186 = add(%185, %160) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %187 = nn.relu(%186) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %188 = add(%model_layer1_5_3_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %189 = sqrt(%188) /* ty=Tensor[(128), float32] */;
  %190 = divide(1f /* ty=float32 */, %189) /* ty=Tensor[(128), float32] */;
  %191 = multiply(%190, %model_layer1_5_3_bn1_weight) /* ty=Tensor[(128), float32] */;
  %192 = nn.conv2d(%187, %model_layer1_5_3_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %193 = expand_dims(%191, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %194 = negative(%model_layer1_5_3_bn1_running_mean) /* ty=Tensor[(128), float32] */;
  %195 = multiply(%194, %191) /* ty=Tensor[(128), float32] */;
  %196 = add(%195, %model_layer1_5_3_bn1_bias) /* ty=Tensor[(128), float32] */;
  %197 = multiply(%192, %193) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %198 = expand_dims(%196, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %199 = add(%197, %198) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %200 = nn.relu(%199) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %201 = add(%model_layer1_5_3_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %202 = sqrt(%201) /* ty=Tensor[(128), float32] */;
  %203 = divide(1f /* ty=float32 */, %202) /* ty=Tensor[(128), float32] */;
  %204 = multiply(%203, %model_layer1_5_3_bn2_weight) /* ty=Tensor[(128), float32] */;
  %205 = nn.conv2d(%200, %model_layer1_5_3_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %206 = expand_dims(%204, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %207 = negative(%model_layer1_5_3_bn2_running_mean) /* ty=Tensor[(128), float32] */;
  %208 = multiply(%207, %204) /* ty=Tensor[(128), float32] */;
  %209 = add(%208, %model_layer1_5_3_bn2_bias) /* ty=Tensor[(128), float32] */;
  %210 = multiply(%205, %206) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %211 = expand_dims(%209, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %212 = add(%210, %211) /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %213 = add(%212, %187) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %214 = nn.relu(%213) /* from_string */ /* ty=Tensor[(1, 128, 150, 150), float32] */;
  %215 = add(%model_layer2_0_0_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %216 = sqrt(%215) /* ty=Tensor[(256), float32] */;
  %217 = divide(1f /* ty=float32 */, %216) /* ty=Tensor[(256), float32] */;
  %218 = multiply(%217, %model_layer2_0_0_bn1_weight) /* ty=Tensor[(256), float32] */;
  %219 = nn.conv2d(%214, %model_layer2_0_0_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %220 = expand_dims(%218, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %221 = negative(%model_layer2_0_0_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %222 = multiply(%221, %218) /* ty=Tensor[(256), float32] */;
  %223 = add(%222, %model_layer2_0_0_bn1_bias) /* ty=Tensor[(256), float32] */;
  %224 = multiply(%219, %220) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %225 = expand_dims(%223, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %226 = add(%224, %225) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %227 = nn.relu(%226) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %228 = add(%model_layer2_0_0_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %229 = sqrt(%228) /* ty=Tensor[(256), float32] */;
  %230 = divide(1f /* ty=float32 */, %229) /* ty=Tensor[(256), float32] */;
  %231 = multiply(%230, %model_layer2_0_0_bn2_weight) /* ty=Tensor[(256), float32] */;
  %232 = nn.conv2d(%227, %model_layer2_0_0_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %233 = expand_dims(%231, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %234 = negative(%model_layer2_0_0_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %235 = multiply(%234, %231) /* ty=Tensor[(256), float32] */;
  %236 = add(%235, %model_layer2_0_0_bn2_bias) /* ty=Tensor[(256), float32] */;
  %237 = multiply(%232, %233) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %238 = expand_dims(%236, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %239 = add(%model_layer2_0_0_downsample_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %240 = sqrt(%239) /* ty=Tensor[(256), float32] */;
  %241 = divide(1f /* ty=float32 */, %240) /* ty=Tensor[(256), float32] */;
  %242 = multiply(%241, %model_layer2_0_0_downsample_1_weight) /* ty=Tensor[(256), float32] */;
  %243 = nn.conv2d(%214, %model_layer2_0_0_downsample_0_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %244 = expand_dims(%242, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %245 = negative(%model_layer2_0_0_downsample_1_running_mean) /* ty=Tensor[(256), float32] */;
  %246 = multiply(%245, %242) /* ty=Tensor[(256), float32] */;
  %247 = add(%246, %model_layer2_0_0_downsample_1_bias) /* ty=Tensor[(256), float32] */;
  %248 = multiply(%243, %244) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %249 = expand_dims(%247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %250 = add(%237, %238) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %251 = add(%248, %249) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %252 = add(%250, %251) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %253 = nn.relu(%252) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %254 = add(%model_layer2_0_1_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %255 = sqrt(%254) /* ty=Tensor[(256), float32] */;
  %256 = divide(1f /* ty=float32 */, %255) /* ty=Tensor[(256), float32] */;
  %257 = multiply(%256, %model_layer2_0_1_bn1_weight) /* ty=Tensor[(256), float32] */;
  %258 = nn.conv2d(%253, %model_layer2_0_1_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %259 = expand_dims(%257, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %260 = negative(%model_layer2_0_1_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %261 = multiply(%260, %257) /* ty=Tensor[(256), float32] */;
  %262 = add(%261, %model_layer2_0_1_bn1_bias) /* ty=Tensor[(256), float32] */;
  %263 = multiply(%258, %259) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %264 = expand_dims(%262, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %265 = add(%263, %264) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %266 = nn.relu(%265) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %267 = add(%model_layer2_0_1_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %268 = sqrt(%267) /* ty=Tensor[(256), float32] */;
  %269 = divide(1f /* ty=float32 */, %268) /* ty=Tensor[(256), float32] */;
  %270 = multiply(%269, %model_layer2_0_1_bn2_weight) /* ty=Tensor[(256), float32] */;
  %271 = nn.conv2d(%266, %model_layer2_0_1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %272 = expand_dims(%270, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %273 = negative(%model_layer2_0_1_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %274 = multiply(%273, %270) /* ty=Tensor[(256), float32] */;
  %275 = add(%274, %model_layer2_0_1_bn2_bias) /* ty=Tensor[(256), float32] */;
  %276 = multiply(%271, %272) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %277 = expand_dims(%275, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %278 = add(%276, %277) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %279 = add(%278, %253) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %280 = nn.relu(%279) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %281 = add(%model_layer2_0_2_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %282 = sqrt(%281) /* ty=Tensor[(256), float32] */;
  %283 = divide(1f /* ty=float32 */, %282) /* ty=Tensor[(256), float32] */;
  %284 = multiply(%283, %model_layer2_0_2_bn1_weight) /* ty=Tensor[(256), float32] */;
  %285 = nn.conv2d(%280, %model_layer2_0_2_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %286 = expand_dims(%284, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %287 = negative(%model_layer2_0_2_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %288 = multiply(%287, %284) /* ty=Tensor[(256), float32] */;
  %289 = add(%288, %model_layer2_0_2_bn1_bias) /* ty=Tensor[(256), float32] */;
  %290 = multiply(%285, %286) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %291 = expand_dims(%289, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %292 = add(%290, %291) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %293 = nn.relu(%292) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %294 = add(%model_layer2_0_2_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %295 = sqrt(%294) /* ty=Tensor[(256), float32] */;
  %296 = divide(1f /* ty=float32 */, %295) /* ty=Tensor[(256), float32] */;
  %297 = multiply(%296, %model_layer2_0_2_bn2_weight) /* ty=Tensor[(256), float32] */;
  %298 = nn.conv2d(%293, %model_layer2_0_2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %299 = expand_dims(%297, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %300 = negative(%model_layer2_0_2_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %301 = multiply(%300, %297) /* ty=Tensor[(256), float32] */;
  %302 = add(%301, %model_layer2_0_2_bn2_bias) /* ty=Tensor[(256), float32] */;
  %303 = multiply(%298, %299) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %304 = expand_dims(%302, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %305 = add(%303, %304) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %306 = add(%305, %280) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %307 = nn.relu(%306) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %308 = add(%model_layer2_0_3_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %309 = sqrt(%308) /* ty=Tensor[(256), float32] */;
  %310 = divide(1f /* ty=float32 */, %309) /* ty=Tensor[(256), float32] */;
  %311 = multiply(%310, %model_layer2_0_3_bn1_weight) /* ty=Tensor[(256), float32] */;
  %312 = nn.conv2d(%307, %model_layer2_0_3_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %313 = expand_dims(%311, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %314 = negative(%model_layer2_0_3_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %315 = multiply(%314, %311) /* ty=Tensor[(256), float32] */;
  %316 = add(%315, %model_layer2_0_3_bn1_bias) /* ty=Tensor[(256), float32] */;
  %317 = multiply(%312, %313) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %318 = expand_dims(%316, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %319 = add(%317, %318) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %320 = nn.relu(%319) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %321 = add(%model_layer2_0_3_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %322 = sqrt(%321) /* ty=Tensor[(256), float32] */;
  %323 = divide(1f /* ty=float32 */, %322) /* ty=Tensor[(256), float32] */;
  %324 = multiply(%323, %model_layer2_0_3_bn2_weight) /* ty=Tensor[(256), float32] */;
  %325 = nn.conv2d(%320, %model_layer2_0_3_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %326 = expand_dims(%324, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %327 = negative(%model_layer2_0_3_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %328 = multiply(%327, %324) /* ty=Tensor[(256), float32] */;
  %329 = add(%328, %model_layer2_0_3_bn2_bias) /* ty=Tensor[(256), float32] */;
  %330 = multiply(%325, %326) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %331 = expand_dims(%329, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %332 = add(%330, %331) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %333 = add(%332, %307) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %334 = nn.relu(%333) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %335 = add(%model_layer2_0_4_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %336 = sqrt(%335) /* ty=Tensor[(256), float32] */;
  %337 = divide(1f /* ty=float32 */, %336) /* ty=Tensor[(256), float32] */;
  %338 = multiply(%337, %model_layer2_0_4_bn1_weight) /* ty=Tensor[(256), float32] */;
  %339 = nn.conv2d(%334, %model_layer2_0_4_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %340 = expand_dims(%338, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %341 = negative(%model_layer2_0_4_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %342 = multiply(%341, %338) /* ty=Tensor[(256), float32] */;
  %343 = add(%342, %model_layer2_0_4_bn1_bias) /* ty=Tensor[(256), float32] */;
  %344 = multiply(%339, %340) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %345 = expand_dims(%343, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %346 = add(%344, %345) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %347 = nn.relu(%346) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %348 = add(%model_layer2_0_4_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %349 = sqrt(%348) /* ty=Tensor[(256), float32] */;
  %350 = divide(1f /* ty=float32 */, %349) /* ty=Tensor[(256), float32] */;
  %351 = multiply(%350, %model_layer2_0_4_bn2_weight) /* ty=Tensor[(256), float32] */;
  %352 = nn.conv2d(%347, %model_layer2_0_4_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %353 = expand_dims(%351, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %354 = negative(%model_layer2_0_4_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %355 = multiply(%354, %351) /* ty=Tensor[(256), float32] */;
  %356 = add(%355, %model_layer2_0_4_bn2_bias) /* ty=Tensor[(256), float32] */;
  %357 = multiply(%352, %353) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %358 = expand_dims(%356, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %359 = add(%357, %358) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %360 = add(%359, %334) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %361 = nn.relu(%360) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %362 = add(%model_layer2_0_5_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %363 = sqrt(%362) /* ty=Tensor[(256), float32] */;
  %364 = divide(1f /* ty=float32 */, %363) /* ty=Tensor[(256), float32] */;
  %365 = multiply(%364, %model_layer2_0_5_bn1_weight) /* ty=Tensor[(256), float32] */;
  %366 = nn.conv2d(%361, %model_layer2_0_5_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %367 = expand_dims(%365, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %368 = negative(%model_layer2_0_5_bn1_running_mean) /* ty=Tensor[(256), float32] */;
  %369 = multiply(%368, %365) /* ty=Tensor[(256), float32] */;
  %370 = add(%369, %model_layer2_0_5_bn1_bias) /* ty=Tensor[(256), float32] */;
  %371 = multiply(%366, %367) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %372 = expand_dims(%370, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %373 = add(%371, %372) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %374 = nn.relu(%373) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %375 = add(%model_layer2_0_5_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %376 = sqrt(%375) /* ty=Tensor[(256), float32] */;
  %377 = divide(1f /* ty=float32 */, %376) /* ty=Tensor[(256), float32] */;
  %378 = multiply(%377, %model_layer2_0_5_bn2_weight) /* ty=Tensor[(256), float32] */;
  %379 = nn.conv2d(%374, %model_layer2_0_5_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %380 = expand_dims(%378, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %381 = negative(%model_layer2_0_5_bn2_running_mean) /* ty=Tensor[(256), float32] */;
  %382 = multiply(%381, %378) /* ty=Tensor[(256), float32] */;
  %383 = add(%382, %model_layer2_0_5_bn2_bias) /* ty=Tensor[(256), float32] */;
  %384 = multiply(%379, %380) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %385 = expand_dims(%383, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %386 = add(%384, %385) /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %387 = add(%386, %361) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %388 = nn.relu(%387) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %389 = nn.conv2d(%388, %loc_0_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 50, 50), float32] */;
  %390 = nn.bias_add(%389, %loc_0_bias) /* from_string */ /* ty=Tensor[(1, 16, 50, 50), float32] */;
  %391 = nn.conv2d(%388, %additional_blocks_0_0_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %392 = nn.bias_add(%391, %additional_blocks_0_0_bias) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %393 = nn.relu(%392) /* from_string */ /* ty=Tensor[(1, 256, 150, 150), float32] */;
  %394 = nn.conv2d(%393, %additional_blocks_0_2_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 512, 75, 75), float32] */;
  %395 = nn.bias_add(%394, %additional_blocks_0_2_bias) /* from_string */ /* ty=Tensor[(1, 512, 75, 75), float32] */;
  %396 = nn.relu(%395) /* from_string */ /* ty=Tensor[(1, 512, 75, 75), float32] */;
  %397 = nn.conv2d(%396, %loc_1_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 24, 25, 25), float32] */;
  %398 = nn.bias_add(%397, %loc_1_bias) /* from_string */ /* ty=Tensor[(1, 24, 25, 25), float32] */;
  %399 = nn.conv2d(%396, %additional_blocks_1_0_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 256, 75, 75), float32] */;
  %400 = nn.bias_add(%399, %additional_blocks_1_0_bias) /* from_string */ /* ty=Tensor[(1, 256, 75, 75), float32] */;
  %401 = nn.relu(%400) /* from_string */ /* ty=Tensor[(1, 256, 75, 75), float32] */;
  %402 = nn.conv2d(%401, %additional_blocks_1_2_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 512, 38, 38), float32] */;
  %403 = nn.bias_add(%402, %additional_blocks_1_2_bias) /* from_string */ /* ty=Tensor[(1, 512, 38, 38), float32] */;
  %404 = nn.relu(%403) /* from_string */ /* ty=Tensor[(1, 512, 38, 38), float32] */;
  %405 = nn.conv2d(%404, %loc_2_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 24, 13, 13), float32] */;
  %406 = nn.bias_add(%405, %loc_2_bias) /* from_string */ /* ty=Tensor[(1, 24, 13, 13), float32] */;
  %407 = nn.conv2d(%404, %additional_blocks_2_0_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 128, 38, 38), float32] */;
  %408 = nn.bias_add(%407, %additional_blocks_2_0_bias) /* from_string */ /* ty=Tensor[(1, 128, 38, 38), float32] */;
  %409 = nn.relu(%408) /* from_string */ /* ty=Tensor[(1, 128, 38, 38), float32] */;
  %410 = nn.conv2d(%409, %additional_blocks_2_2_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 19, 19), float32] */;
  %411 = nn.bias_add(%410, %additional_blocks_2_2_bias) /* from_string */ /* ty=Tensor[(1, 256, 19, 19), float32] */;
  %412 = nn.relu(%411) /* from_string */ /* ty=Tensor[(1, 256, 19, 19), float32] */;
  %413 = nn.conv2d(%412, %loc_3_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 24, 7, 7), float32] */;
  %414 = nn.bias_add(%413, %loc_3_bias) /* from_string */ /* ty=Tensor[(1, 24, 7, 7), float32] */;
  %415 = nn.conv2d(%412, %additional_blocks_3_0_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 128, 19, 19), float32] */;
  %416 = nn.bias_add(%415, %additional_blocks_3_0_bias) /* from_string */ /* ty=Tensor[(1, 128, 19, 19), float32] */;
  %417 = nn.relu(%416) /* from_string */ /* ty=Tensor[(1, 128, 19, 19), float32] */;
  %418 = nn.conv2d(%417, %additional_blocks_3_2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 9, 9), float32] */;
  %419 = nn.bias_add(%418, %additional_blocks_3_2_bias) /* from_string */ /* ty=Tensor[(1, 256, 9, 9), float32] */;
  %420 = nn.relu(%419) /* from_string */ /* ty=Tensor[(1, 256, 9, 9), float32] */;
  %421 = nn.conv2d(%420, %loc_4_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %422 = nn.bias_add(%421, %loc_4_bias) /* from_string */ /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %423 = nn.conv2d(%420, %additional_blocks_4_0_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 128, 9, 9), float32] */;
  %424 = nn.bias_add(%423, %additional_blocks_4_0_bias) /* from_string */ /* ty=Tensor[(1, 128, 9, 9), float32] */;
  %425 = nn.relu(%424) /* from_string */ /* ty=Tensor[(1, 128, 9, 9), float32] */;
  %426 = nn.conv2d(%425, %additional_blocks_4_2_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %427 = nn.bias_add(%426, %additional_blocks_4_2_bias) /* from_string */ /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %428 = nn.relu(%427) /* from_string */ /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %429 = nn.conv2d(%428, %loc_5_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %430 = nn.bias_add(%429, %loc_5_bias) /* from_string */ /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %431 = reshape(%390, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 10000), float32] */;
  %432 = reshape(%398, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 3750), float32] */;
  %433 = reshape(%406, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 1014), float32] */;
  %434 = reshape(%414, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 294), float32] */;
  %435 = reshape(%422, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 36), float32] */;
  %436 = reshape(%430, newshape=[1, 4, -1]) /* from_string */ /* ty=Tensor[(1, 4, 36), float32] */;
  %437 = (%431, %432, %433, %434, %435, %436);
  %438 = concatenate(%437, axis=2) /* from_string */ /* ty=Tensor[(1, 4, 15130), float32] */;
  %439 = nn.conv2d(%388, %conf_0_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=324, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 324, 50, 50), float32] */;
  %440 = nn.bias_add(%439, %conf_0_bias) /* from_string */ /* ty=Tensor[(1, 324, 50, 50), float32] */;
  %441 = nn.conv2d(%396, %conf_1_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=486, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 486, 25, 25), float32] */;
  %442 = nn.bias_add(%441, %conf_1_bias) /* from_string */ /* ty=Tensor[(1, 486, 25, 25), float32] */;
  %443 = nn.conv2d(%404, %conf_2_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=486, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 486, 13, 13), float32] */;
  %444 = nn.bias_add(%443, %conf_2_bias) /* from_string */ /* ty=Tensor[(1, 486, 13, 13), float32] */;
  %445 = nn.conv2d(%412, %conf_3_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=486, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 486, 7, 7), float32] */;
  %446 = nn.bias_add(%445, %conf_3_bias) /* from_string */ /* ty=Tensor[(1, 486, 7, 7), float32] */;
  %447 = nn.conv2d(%420, %conf_4_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=324, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 324, 3, 3), float32] */;
  %448 = nn.bias_add(%447, %conf_4_bias) /* from_string */ /* ty=Tensor[(1, 324, 3, 3), float32] */;
  %449 = nn.conv2d(%428, %conf_5_weight, strides=[3, 3], padding=[1, 1, 1, 1], channels=324, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 324, 3, 3), float32] */;
  %450 = nn.bias_add(%449, %conf_5_bias) /* from_string */ /* ty=Tensor[(1, 324, 3, 3), float32] */;
  %451 = reshape(%440, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 10000), float32] */;
  %452 = reshape(%442, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 3750), float32] */;
  %453 = reshape(%444, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 1014), float32] */;
  %454 = reshape(%446, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 294), float32] */;
  %455 = reshape(%448, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 36), float32] */;
  %456 = reshape(%450, newshape=[1, 81, -1]) /* from_string */ /* ty=Tensor[(1, 81, 36), float32] */;
  %457 = (%451, %452, %453, %454, %455, %456);
  %458 = concatenate(%457, axis=2) /* from_string */ /* ty=Tensor[(1, 81, 15130), float32] */;
  %459 = copy(%438) /* from_string */ /* ty=Tensor[(1, 4, 15130), float32] */;
  %460 = copy(%458) /* from_string */ /* ty=Tensor[(1, 81, 15130), float32] */;
  (%459, %460)
}