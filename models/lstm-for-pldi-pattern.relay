#[version = "0.0.5"]
def @main(%x: Tensor[(35, 1, 128), float32], %hidden0: Tensor[(1, 1, 128), float32], %hidden1: Tensor[(1, 1, 128), float32], %rnn_weight_ih_l0: Tensor[(512, 128), float32], %rnn_weight_hh_l0: Tensor[(512, 128), float32], %rnn_bias_ih_l0: Tensor[(512), float32], %rnn_bias_hh_l0: Tensor[(512), float32]) {
  %0 = split(%x, indices_or_sections=35);
  %1 = %0.0;
  %2 = %0.1;
  %3 = %0.2;
  %4 = %0.3;
  %5 = %0.4;
  %6 = %0.5;
  %7 = %0.6;
  %8 = %0.7;
  %9 = %0.8;
  %10 = %0.9;
  %11 = %0.10;
  %12 = %0.11;
  %13 = %0.12;
  %14 = %0.13;
  %15 = %0.14;
  %16 = %0.15;
  %17 = %0.16;
  %18 = %0.17;
  %19 = %0.18;
  %20 = %0.19;
  %21 = %0.20;
  %22 = %0.21;
  %23 = %0.22;
  %24 = %0.23;
  %25 = %0.24;
  %26 = %0.25;
  %27 = %0.26;
  %28 = %0.27;
  %29 = %0.28;
  %30 = %0.29;
  %31 = %0.30;
  %32 = %0.31;
  %33 = %0.32;
  %34 = %0.33;
  %35 = %0.34;
  %36 = squeeze(%1, axis=[0]);
  %37 = squeeze(%2, axis=[0]);
  %38 = squeeze(%3, axis=[0]);
  %39 = squeeze(%4, axis=[0]);
  %40 = squeeze(%5, axis=[0]);
  %41 = squeeze(%6, axis=[0]);
  %42 = squeeze(%7, axis=[0]);
  %43 = squeeze(%8, axis=[0]);
  %44 = squeeze(%9, axis=[0]);
  %45 = squeeze(%10, axis=[0]);
  %46 = squeeze(%11, axis=[0]);
  %47 = squeeze(%12, axis=[0]);
  %48 = squeeze(%13, axis=[0]);
  %49 = squeeze(%14, axis=[0]);
  %50 = squeeze(%15, axis=[0]);
  %51 = squeeze(%16, axis=[0]);
  %52 = squeeze(%17, axis=[0]);
  %53 = squeeze(%18, axis=[0]);
  %54 = squeeze(%19, axis=[0]);
  %55 = squeeze(%20, axis=[0]);
  %56 = squeeze(%21, axis=[0]);
  %57 = squeeze(%22, axis=[0]);
  %58 = squeeze(%23, axis=[0]);
  %59 = squeeze(%24, axis=[0]);
  %60 = squeeze(%25, axis=[0]);
  %61 = squeeze(%26, axis=[0]);
  %62 = squeeze(%27, axis=[0]);
  %63 = squeeze(%28, axis=[0]);
  %64 = squeeze(%29, axis=[0]);
  %65 = squeeze(%30, axis=[0]);
  %66 = squeeze(%31, axis=[0]);
  %67 = squeeze(%32, axis=[0]);
  %68 = squeeze(%33, axis=[0]);
  %69 = squeeze(%34, axis=[0]);
  %70 = squeeze(%35, axis=[0]);
  %71 = (%36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70);
  %72 = %hidden0;
  %73 = split(%72, indices_or_sections=1);
  %74 = %73.0;
  %75 = squeeze(%74, axis=[0]);
  %76 = (%75,);
  %77 = %71.0;
  %78 = %76.0;
  %79 = (%77, %78);
  %80 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %81 = concatenate(%79, axis=1);
  %82 = concatenate(%80, axis=1);
  %83 = nn.dense(%81, %82, units=None);
  %84 = add(%83, %rnn_bias_ih_l0);
  %85 = add(%84, %rnn_bias_hh_l0);
  %86 = split(%85, indices_or_sections=4, axis=-1);
  %87 = %86.3;
  %88 = %86.1;
  %89 = %hidden1;
  %90 = split(%89, indices_or_sections=1);
  %91 = %90.0;
  %92 = squeeze(%91, axis=[0]);
  %93 = (%92,);
  %94 = sigmoid(%88);
  %95 = %93.0;
  %96 = %86.0;
  %97 = %86.2;
  %98 = sigmoid(%96);
  %99 = tanh(%97);
  %100 = multiply(%94, %95);
  %101 = multiply(%98, %99);
  %102 = add(%100, %101);
  %103 = sigmoid(%87);
  %104 = tanh(%102);
  %105 = %71.1;
  %106 = multiply(%103, %104);
  %107 = (%105, %106);
  %108 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %109 = concatenate(%107, axis=1);
  %110 = concatenate(%108, axis=1);
  %111 = nn.dense(%109, %110, units=None);
  %112 = add(%111, %rnn_bias_ih_l0);
  %113 = add(%112, %rnn_bias_hh_l0);
  %114 = split(%113, indices_or_sections=4, axis=-1);
  %115 = %114.3;
  %116 = %114.1;
  %117 = sigmoid(%116);
  %118 = %114.0;
  %119 = %114.2;
  %120 = sigmoid(%118);
  %121 = tanh(%119);
  %122 = multiply(%117, %102);
  %123 = multiply(%120, %121);
  %124 = add(%122, %123);
  %125 = sigmoid(%115);
  %126 = tanh(%124);
  %127 = %71.2;
  %128 = multiply(%125, %126);
  %129 = (%127, %128);
  %130 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %131 = concatenate(%129, axis=1);
  %132 = concatenate(%130, axis=1);
  %133 = nn.dense(%131, %132, units=None);
  %134 = add(%133, %rnn_bias_ih_l0);
  %135 = add(%134, %rnn_bias_hh_l0);
  %136 = split(%135, indices_or_sections=4, axis=-1);
  %137 = %136.3;
  %138 = %136.1;
  %139 = sigmoid(%138);
  %140 = %136.0;
  %141 = %136.2;
  %142 = sigmoid(%140);
  %143 = tanh(%141);
  %144 = multiply(%139, %124);
  %145 = multiply(%142, %143);
  %146 = add(%144, %145);
  %147 = sigmoid(%137);
  %148 = tanh(%146);
  %149 = %71.3;
  %150 = multiply(%147, %148);
  %151 = (%149, %150);
  %152 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %153 = concatenate(%151, axis=1);
  %154 = concatenate(%152, axis=1);
  %155 = nn.dense(%153, %154, units=None);
  %156 = add(%155, %rnn_bias_ih_l0);
  %157 = add(%156, %rnn_bias_hh_l0);
  %158 = split(%157, indices_or_sections=4, axis=-1);
  %159 = %158.3;
  %160 = %158.1;
  %161 = sigmoid(%160);
  %162 = %158.0;
  %163 = %158.2;
  %164 = sigmoid(%162);
  %165 = tanh(%163);
  %166 = multiply(%161, %146);
  %167 = multiply(%164, %165);
  %168 = add(%166, %167);
  %169 = sigmoid(%159);
  %170 = tanh(%168);
  %171 = %71.4;
  %172 = multiply(%169, %170);
  %173 = (%171, %172);
  %174 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %175 = concatenate(%173, axis=1);
  %176 = concatenate(%174, axis=1);
  %177 = nn.dense(%175, %176, units=None);
  %178 = add(%177, %rnn_bias_ih_l0);
  %179 = add(%178, %rnn_bias_hh_l0);
  %180 = split(%179, indices_or_sections=4, axis=-1);
  %181 = %180.3;
  %182 = %180.1;
  %183 = sigmoid(%182);
  %184 = %180.0;
  %185 = %180.2;
  %186 = sigmoid(%184);
  %187 = tanh(%185);
  %188 = multiply(%183, %168);
  %189 = multiply(%186, %187);
  %190 = add(%188, %189);
  %191 = sigmoid(%181);
  %192 = tanh(%190);
  %193 = %71.5;
  %194 = multiply(%191, %192);
  %195 = (%193, %194);
  %196 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %197 = concatenate(%195, axis=1);
  %198 = concatenate(%196, axis=1);
  %199 = nn.dense(%197, %198, units=None);
  %200 = add(%199, %rnn_bias_ih_l0);
  %201 = add(%200, %rnn_bias_hh_l0);
  %202 = split(%201, indices_or_sections=4, axis=-1);
  %203 = %202.3;
  %204 = %202.1;
  %205 = sigmoid(%204);
  %206 = %202.0;
  %207 = %202.2;
  %208 = sigmoid(%206);
  %209 = tanh(%207);
  %210 = multiply(%205, %190);
  %211 = multiply(%208, %209);
  %212 = add(%210, %211);
  %213 = sigmoid(%203);
  %214 = tanh(%212);
  %215 = %71.6;
  %216 = multiply(%213, %214);
  %217 = (%215, %216);
  %218 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %219 = concatenate(%217, axis=1);
  %220 = concatenate(%218, axis=1);
  %221 = nn.dense(%219, %220, units=None);
  %222 = add(%221, %rnn_bias_ih_l0);
  %223 = add(%222, %rnn_bias_hh_l0);
  %224 = split(%223, indices_or_sections=4, axis=-1);
  %225 = %224.3;
  %226 = %224.1;
  %227 = sigmoid(%226);
  %228 = %224.0;
  %229 = %224.2;
  %230 = sigmoid(%228);
  %231 = tanh(%229);
  %232 = multiply(%227, %212);
  %233 = multiply(%230, %231);
  %234 = add(%232, %233);
  %235 = sigmoid(%225);
  %236 = tanh(%234);
  %237 = %71.7;
  %238 = multiply(%235, %236);
  %239 = (%237, %238);
  %240 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %241 = concatenate(%239, axis=1);
  %242 = concatenate(%240, axis=1);
  %243 = nn.dense(%241, %242, units=None);
  %244 = add(%243, %rnn_bias_ih_l0);
  %245 = add(%244, %rnn_bias_hh_l0);
  %246 = split(%245, indices_or_sections=4, axis=-1);
  %247 = %246.3;
  %248 = %246.1;
  %249 = sigmoid(%248);
  %250 = %246.0;
  %251 = %246.2;
  %252 = sigmoid(%250);
  %253 = tanh(%251);
  %254 = multiply(%249, %234);
  %255 = multiply(%252, %253);
  %256 = add(%254, %255);
  %257 = sigmoid(%247);
  %258 = tanh(%256);
  %259 = %71.8;
  %260 = multiply(%257, %258);
  %261 = (%259, %260);
  %262 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %263 = concatenate(%261, axis=1);
  %264 = concatenate(%262, axis=1);
  %265 = nn.dense(%263, %264, units=None);
  %266 = add(%265, %rnn_bias_ih_l0);
  %267 = add(%266, %rnn_bias_hh_l0);
  %268 = split(%267, indices_or_sections=4, axis=-1);
  %269 = %268.3;
  %270 = %268.1;
  %271 = sigmoid(%270);
  %272 = %268.0;
  %273 = %268.2;
  %274 = sigmoid(%272);
  %275 = tanh(%273);
  %276 = multiply(%271, %256);
  %277 = multiply(%274, %275);
  %278 = add(%276, %277);
  %279 = sigmoid(%269);
  %280 = tanh(%278);
  %281 = %71.9;
  %282 = multiply(%279, %280);
  %283 = (%281, %282);
  %284 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %285 = concatenate(%283, axis=1);
  %286 = concatenate(%284, axis=1);
  %287 = nn.dense(%285, %286, units=None);
  %288 = add(%287, %rnn_bias_ih_l0);
  %289 = add(%288, %rnn_bias_hh_l0);
  %290 = split(%289, indices_or_sections=4, axis=-1);
  %291 = %290.3;
  %292 = %290.1;
  %293 = sigmoid(%292);
  %294 = %290.0;
  %295 = %290.2;
  %296 = sigmoid(%294);
  %297 = tanh(%295);
  %298 = multiply(%293, %278);
  %299 = multiply(%296, %297);
  %300 = add(%298, %299);
  %301 = sigmoid(%291);
  %302 = tanh(%300);
  %303 = %71.10;
  %304 = multiply(%301, %302);
  %305 = (%303, %304);
  %306 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %307 = concatenate(%305, axis=1);
  %308 = concatenate(%306, axis=1);
  %309 = nn.dense(%307, %308, units=None);
  %310 = add(%309, %rnn_bias_ih_l0);
  %311 = add(%310, %rnn_bias_hh_l0);
  %312 = split(%311, indices_or_sections=4, axis=-1);
  %313 = %312.3;
  %314 = %312.1;
  %315 = sigmoid(%314);
  %316 = %312.0;
  %317 = %312.2;
  %318 = sigmoid(%316);
  %319 = tanh(%317);
  %320 = multiply(%315, %300);
  %321 = multiply(%318, %319);
  %322 = add(%320, %321);
  %323 = sigmoid(%313);
  %324 = tanh(%322);
  %325 = %71.11;
  %326 = multiply(%323, %324);
  %327 = (%325, %326);
  %328 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %329 = concatenate(%327, axis=1);
  %330 = concatenate(%328, axis=1);
  %331 = nn.dense(%329, %330, units=None);
  %332 = add(%331, %rnn_bias_ih_l0);
  %333 = add(%332, %rnn_bias_hh_l0);
  %334 = split(%333, indices_or_sections=4, axis=-1);
  %335 = %334.3;
  %336 = %334.1;
  %337 = sigmoid(%336);
  %338 = %334.0;
  %339 = %334.2;
  %340 = sigmoid(%338);
  %341 = tanh(%339);
  %342 = multiply(%337, %322);
  %343 = multiply(%340, %341);
  %344 = add(%342, %343);
  %345 = sigmoid(%335);
  %346 = tanh(%344);
  %347 = %71.12;
  %348 = multiply(%345, %346);
  %349 = (%347, %348);
  %350 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %351 = concatenate(%349, axis=1);
  %352 = concatenate(%350, axis=1);
  %353 = nn.dense(%351, %352, units=None);
  %354 = add(%353, %rnn_bias_ih_l0);
  %355 = add(%354, %rnn_bias_hh_l0);
  %356 = split(%355, indices_or_sections=4, axis=-1);
  %357 = %356.3;
  %358 = %356.1;
  %359 = sigmoid(%358);
  %360 = %356.0;
  %361 = %356.2;
  %362 = sigmoid(%360);
  %363 = tanh(%361);
  %364 = multiply(%359, %344);
  %365 = multiply(%362, %363);
  %366 = add(%364, %365);
  %367 = sigmoid(%357);
  %368 = tanh(%366);
  %369 = %71.13;
  %370 = multiply(%367, %368);
  %371 = (%369, %370);
  %372 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %373 = concatenate(%371, axis=1);
  %374 = concatenate(%372, axis=1);
  %375 = nn.dense(%373, %374, units=None);
  %376 = add(%375, %rnn_bias_ih_l0);
  %377 = add(%376, %rnn_bias_hh_l0);
  %378 = split(%377, indices_or_sections=4, axis=-1);
  %379 = %378.3;
  %380 = %378.1;
  %381 = sigmoid(%380);
  %382 = %378.0;
  %383 = %378.2;
  %384 = sigmoid(%382);
  %385 = tanh(%383);
  %386 = multiply(%381, %366);
  %387 = multiply(%384, %385);
  %388 = add(%386, %387);
  %389 = sigmoid(%379);
  %390 = tanh(%388);
  %391 = %71.14;
  %392 = multiply(%389, %390);
  %393 = (%391, %392);
  %394 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %395 = concatenate(%393, axis=1);
  %396 = concatenate(%394, axis=1);
  %397 = nn.dense(%395, %396, units=None);
  %398 = add(%397, %rnn_bias_ih_l0);
  %399 = add(%398, %rnn_bias_hh_l0);
  %400 = split(%399, indices_or_sections=4, axis=-1);
  %401 = %400.3;
  %402 = %400.1;
  %403 = sigmoid(%402);
  %404 = %400.0;
  %405 = %400.2;
  %406 = sigmoid(%404);
  %407 = tanh(%405);
  %408 = multiply(%403, %388);
  %409 = multiply(%406, %407);
  %410 = add(%408, %409);
  %411 = sigmoid(%401);
  %412 = tanh(%410);
  %413 = %71.15;
  %414 = multiply(%411, %412);
  %415 = (%413, %414);
  %416 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %417 = concatenate(%415, axis=1);
  %418 = concatenate(%416, axis=1);
  %419 = nn.dense(%417, %418, units=None);
  %420 = add(%419, %rnn_bias_ih_l0);
  %421 = add(%420, %rnn_bias_hh_l0);
  %422 = split(%421, indices_or_sections=4, axis=-1);
  %423 = %422.3;
  %424 = %422.1;
  %425 = sigmoid(%424);
  %426 = %422.0;
  %427 = %422.2;
  %428 = sigmoid(%426);
  %429 = tanh(%427);
  %430 = multiply(%425, %410);
  %431 = multiply(%428, %429);
  %432 = add(%430, %431);
  %433 = sigmoid(%423);
  %434 = tanh(%432);
  %435 = %71.16;
  %436 = multiply(%433, %434);
  %437 = (%435, %436);
  %438 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %439 = concatenate(%437, axis=1);
  %440 = concatenate(%438, axis=1);
  %441 = nn.dense(%439, %440, units=None);
  %442 = add(%441, %rnn_bias_ih_l0);
  %443 = add(%442, %rnn_bias_hh_l0);
  %444 = split(%443, indices_or_sections=4, axis=-1);
  %445 = %444.3;
  %446 = %444.1;
  %447 = sigmoid(%446);
  %448 = %444.0;
  %449 = %444.2;
  %450 = sigmoid(%448);
  %451 = tanh(%449);
  %452 = multiply(%447, %432);
  %453 = multiply(%450, %451);
  %454 = add(%452, %453);
  %455 = sigmoid(%445);
  %456 = tanh(%454);
  %457 = %71.17;
  %458 = multiply(%455, %456);
  %459 = (%457, %458);
  %460 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %461 = concatenate(%459, axis=1);
  %462 = concatenate(%460, axis=1);
  %463 = nn.dense(%461, %462, units=None);
  %464 = add(%463, %rnn_bias_ih_l0);
  %465 = add(%464, %rnn_bias_hh_l0);
  %466 = split(%465, indices_or_sections=4, axis=-1);
  %467 = %466.3;
  %468 = %466.1;
  %469 = sigmoid(%468);
  %470 = %466.0;
  %471 = %466.2;
  %472 = sigmoid(%470);
  %473 = tanh(%471);
  %474 = multiply(%469, %454);
  %475 = multiply(%472, %473);
  %476 = add(%474, %475);
  %477 = sigmoid(%467);
  %478 = tanh(%476);
  %479 = %71.18;
  %480 = multiply(%477, %478);
  %481 = (%479, %480);
  %482 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %483 = concatenate(%481, axis=1);
  %484 = concatenate(%482, axis=1);
  %485 = nn.dense(%483, %484, units=None);
  %486 = add(%485, %rnn_bias_ih_l0);
  %487 = add(%486, %rnn_bias_hh_l0);
  %488 = split(%487, indices_or_sections=4, axis=-1);
  %489 = %488.3;
  %490 = %488.1;
  %491 = sigmoid(%490);
  %492 = %488.0;
  %493 = %488.2;
  %494 = sigmoid(%492);
  %495 = tanh(%493);
  %496 = multiply(%491, %476);
  %497 = multiply(%494, %495);
  %498 = add(%496, %497);
  %499 = sigmoid(%489);
  %500 = tanh(%498);
  %501 = %71.19;
  %502 = multiply(%499, %500);
  %503 = (%501, %502);
  %504 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %505 = concatenate(%503, axis=1);
  %506 = concatenate(%504, axis=1);
  %507 = nn.dense(%505, %506, units=None);
  %508 = add(%507, %rnn_bias_ih_l0);
  %509 = add(%508, %rnn_bias_hh_l0);
  %510 = split(%509, indices_or_sections=4, axis=-1);
  %511 = %510.3;
  %512 = %510.1;
  %513 = sigmoid(%512);
  %514 = %510.0;
  %515 = %510.2;
  %516 = sigmoid(%514);
  %517 = tanh(%515);
  %518 = multiply(%513, %498);
  %519 = multiply(%516, %517);
  %520 = add(%518, %519);
  %521 = sigmoid(%511);
  %522 = tanh(%520);
  %523 = %71.20;
  %524 = multiply(%521, %522);
  %525 = (%523, %524);
  %526 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %527 = concatenate(%525, axis=1);
  %528 = concatenate(%526, axis=1);
  %529 = nn.dense(%527, %528, units=None);
  %530 = add(%529, %rnn_bias_ih_l0);
  %531 = add(%530, %rnn_bias_hh_l0);
  %532 = split(%531, indices_or_sections=4, axis=-1);
  %533 = %532.3;
  %534 = %532.1;
  %535 = sigmoid(%534);
  %536 = %532.0;
  %537 = %532.2;
  %538 = sigmoid(%536);
  %539 = tanh(%537);
  %540 = multiply(%535, %520);
  %541 = multiply(%538, %539);
  %542 = add(%540, %541);
  %543 = sigmoid(%533);
  %544 = tanh(%542);
  %545 = %71.21;
  %546 = multiply(%543, %544);
  %547 = (%545, %546);
  %548 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %549 = concatenate(%547, axis=1);
  %550 = concatenate(%548, axis=1);
  %551 = nn.dense(%549, %550, units=None);
  %552 = add(%551, %rnn_bias_ih_l0);
  %553 = add(%552, %rnn_bias_hh_l0);
  %554 = split(%553, indices_or_sections=4, axis=-1);
  %555 = %554.3;
  %556 = %554.1;
  %557 = sigmoid(%556);
  %558 = %554.0;
  %559 = %554.2;
  %560 = sigmoid(%558);
  %561 = tanh(%559);
  %562 = multiply(%557, %542);
  %563 = multiply(%560, %561);
  %564 = add(%562, %563);
  %565 = sigmoid(%555);
  %566 = tanh(%564);
  %567 = %71.22;
  %568 = multiply(%565, %566);
  %569 = (%567, %568);
  %570 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %571 = concatenate(%569, axis=1);
  %572 = concatenate(%570, axis=1);
  %573 = nn.dense(%571, %572, units=None);
  %574 = add(%573, %rnn_bias_ih_l0);
  %575 = add(%574, %rnn_bias_hh_l0);
  %576 = split(%575, indices_or_sections=4, axis=-1);
  %577 = %576.3;
  %578 = %576.1;
  %579 = sigmoid(%578);
  %580 = %576.0;
  %581 = %576.2;
  %582 = sigmoid(%580);
  %583 = tanh(%581);
  %584 = multiply(%579, %564);
  %585 = multiply(%582, %583);
  %586 = add(%584, %585);
  %587 = sigmoid(%577);
  %588 = tanh(%586);
  %589 = %71.23;
  %590 = multiply(%587, %588);
  %591 = (%589, %590);
  %592 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %593 = concatenate(%591, axis=1);
  %594 = concatenate(%592, axis=1);
  %595 = nn.dense(%593, %594, units=None);
  %596 = add(%595, %rnn_bias_ih_l0);
  %597 = add(%596, %rnn_bias_hh_l0);
  %598 = split(%597, indices_or_sections=4, axis=-1);
  %599 = %598.3;
  %600 = %598.1;
  %601 = sigmoid(%600);
  %602 = %598.0;
  %603 = %598.2;
  %604 = sigmoid(%602);
  %605 = tanh(%603);
  %606 = multiply(%601, %586);
  %607 = multiply(%604, %605);
  %608 = add(%606, %607);
  %609 = sigmoid(%599);
  %610 = tanh(%608);
  %611 = %71.24;
  %612 = multiply(%609, %610);
  %613 = (%611, %612);
  %614 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %615 = concatenate(%613, axis=1);
  %616 = concatenate(%614, axis=1);
  %617 = nn.dense(%615, %616, units=None);
  %618 = add(%617, %rnn_bias_ih_l0);
  %619 = add(%618, %rnn_bias_hh_l0);
  %620 = split(%619, indices_or_sections=4, axis=-1);
  %621 = %620.3;
  %622 = %620.1;
  %623 = sigmoid(%622);
  %624 = %620.0;
  %625 = %620.2;
  %626 = sigmoid(%624);
  %627 = tanh(%625);
  %628 = multiply(%623, %608);
  %629 = multiply(%626, %627);
  %630 = add(%628, %629);
  %631 = sigmoid(%621);
  %632 = tanh(%630);
  %633 = %71.25;
  %634 = multiply(%631, %632);
  %635 = (%633, %634);
  %636 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %637 = concatenate(%635, axis=1);
  %638 = concatenate(%636, axis=1);
  %639 = nn.dense(%637, %638, units=None);
  %640 = add(%639, %rnn_bias_ih_l0);
  %641 = add(%640, %rnn_bias_hh_l0);
  %642 = split(%641, indices_or_sections=4, axis=-1);
  %643 = %642.3;
  %644 = %642.1;
  %645 = sigmoid(%644);
  %646 = %642.0;
  %647 = %642.2;
  %648 = sigmoid(%646);
  %649 = tanh(%647);
  %650 = multiply(%645, %630);
  %651 = multiply(%648, %649);
  %652 = add(%650, %651);
  %653 = sigmoid(%643);
  %654 = tanh(%652);
  %655 = %71.26;
  %656 = multiply(%653, %654);
  %657 = (%655, %656);
  %658 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %659 = concatenate(%657, axis=1);
  %660 = concatenate(%658, axis=1);
  %661 = nn.dense(%659, %660, units=None);
  %662 = add(%661, %rnn_bias_ih_l0);
  %663 = add(%662, %rnn_bias_hh_l0);
  %664 = split(%663, indices_or_sections=4, axis=-1);
  %665 = %664.3;
  %666 = %664.1;
  %667 = sigmoid(%666);
  %668 = %664.0;
  %669 = %664.2;
  %670 = sigmoid(%668);
  %671 = tanh(%669);
  %672 = multiply(%667, %652);
  %673 = multiply(%670, %671);
  %674 = add(%672, %673);
  %675 = sigmoid(%665);
  %676 = tanh(%674);
  %677 = %71.27;
  %678 = multiply(%675, %676);
  %679 = (%677, %678);
  %680 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %681 = concatenate(%679, axis=1);
  %682 = concatenate(%680, axis=1);
  %683 = nn.dense(%681, %682, units=None);
  %684 = add(%683, %rnn_bias_ih_l0);
  %685 = add(%684, %rnn_bias_hh_l0);
  %686 = split(%685, indices_or_sections=4, axis=-1);
  %687 = %686.3;
  %688 = %686.1;
  %689 = sigmoid(%688);
  %690 = %686.0;
  %691 = %686.2;
  %692 = sigmoid(%690);
  %693 = tanh(%691);
  %694 = multiply(%689, %674);
  %695 = multiply(%692, %693);
  %696 = add(%694, %695);
  %697 = sigmoid(%687);
  %698 = tanh(%696);
  %699 = %71.28;
  %700 = multiply(%697, %698);
  %701 = (%699, %700);
  %702 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %703 = concatenate(%701, axis=1);
  %704 = concatenate(%702, axis=1);
  %705 = nn.dense(%703, %704, units=None);
  %706 = add(%705, %rnn_bias_ih_l0);
  %707 = add(%706, %rnn_bias_hh_l0);
  %708 = split(%707, indices_or_sections=4, axis=-1);
  %709 = %708.3;
  %710 = %708.1;
  %711 = sigmoid(%710);
  %712 = %708.0;
  %713 = %708.2;
  %714 = sigmoid(%712);
  %715 = tanh(%713);
  %716 = multiply(%711, %696);
  %717 = multiply(%714, %715);
  %718 = add(%716, %717);
  %719 = sigmoid(%709);
  %720 = tanh(%718);
  %721 = %71.29;
  %722 = multiply(%719, %720);
  %723 = (%721, %722);
  %724 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %725 = concatenate(%723, axis=1);
  %726 = concatenate(%724, axis=1);
  %727 = nn.dense(%725, %726, units=None);
  %728 = add(%727, %rnn_bias_ih_l0);
  %729 = add(%728, %rnn_bias_hh_l0);
  %730 = split(%729, indices_or_sections=4, axis=-1);
  %731 = %730.3;
  %732 = %730.1;
  %733 = sigmoid(%732);
  %734 = %730.0;
  %735 = %730.2;
  %736 = sigmoid(%734);
  %737 = tanh(%735);
  %738 = multiply(%733, %718);
  %739 = multiply(%736, %737);
  %740 = add(%738, %739);
  %741 = sigmoid(%731);
  %742 = tanh(%740);
  %743 = %71.30;
  %744 = multiply(%741, %742);
  %745 = (%743, %744);
  %746 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %747 = concatenate(%745, axis=1);
  %748 = concatenate(%746, axis=1);
  %749 = nn.dense(%747, %748, units=None);
  %750 = add(%749, %rnn_bias_ih_l0);
  %751 = add(%750, %rnn_bias_hh_l0);
  %752 = split(%751, indices_or_sections=4, axis=-1);
  %753 = %752.3;
  %754 = %752.1;
  %755 = sigmoid(%754);
  %756 = %752.0;
  %757 = %752.2;
  %758 = sigmoid(%756);
  %759 = tanh(%757);
  %760 = multiply(%755, %740);
  %761 = multiply(%758, %759);
  %762 = add(%760, %761);
  %763 = sigmoid(%753);
  %764 = tanh(%762);
  %765 = %71.31;
  %766 = multiply(%763, %764);
  %767 = (%765, %766);
  %768 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %769 = concatenate(%767, axis=1);
  %770 = concatenate(%768, axis=1);
  %771 = nn.dense(%769, %770, units=None);
  %772 = add(%771, %rnn_bias_ih_l0);
  %773 = add(%772, %rnn_bias_hh_l0);
  %774 = split(%773, indices_or_sections=4, axis=-1);
  %775 = %774.3;
  %776 = %774.1;
  %777 = sigmoid(%776);
  %778 = %774.0;
  %779 = %774.2;
  %780 = sigmoid(%778);
  %781 = tanh(%779);
  %782 = multiply(%777, %762);
  %783 = multiply(%780, %781);
  %784 = add(%782, %783);
  %785 = sigmoid(%775);
  %786 = tanh(%784);
  %787 = %71.32;
  %788 = multiply(%785, %786);
  %789 = (%787, %788);
  %790 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %791 = concatenate(%789, axis=1);
  %792 = concatenate(%790, axis=1);
  %793 = nn.dense(%791, %792, units=None);
  %794 = add(%793, %rnn_bias_ih_l0);
  %795 = add(%794, %rnn_bias_hh_l0);
  %796 = split(%795, indices_or_sections=4, axis=-1);
  %797 = %796.3;
  %798 = %796.1;
  %799 = sigmoid(%798);
  %800 = %796.0;
  %801 = %796.2;
  %802 = sigmoid(%800);
  %803 = tanh(%801);
  %804 = multiply(%799, %784);
  %805 = multiply(%802, %803);
  %806 = add(%804, %805);
  %807 = sigmoid(%797);
  %808 = tanh(%806);
  %809 = %71.33;
  %810 = multiply(%807, %808);
  %811 = (%809, %810);
  %812 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %813 = concatenate(%811, axis=1);
  %814 = concatenate(%812, axis=1);
  %815 = nn.dense(%813, %814, units=None);
  %816 = add(%815, %rnn_bias_ih_l0);
  %817 = add(%816, %rnn_bias_hh_l0);
  %818 = split(%817, indices_or_sections=4, axis=-1);
  %819 = %818.3;
  %820 = %818.1;
  %821 = sigmoid(%820);
  %822 = %818.0;
  %823 = %818.2;
  %824 = sigmoid(%822);
  %825 = tanh(%823);
  %826 = multiply(%821, %806);
  %827 = multiply(%824, %825);
  %828 = add(%826, %827);
  %829 = sigmoid(%819);
  %830 = tanh(%828);
  %831 = %71.34;
  %832 = multiply(%829, %830);
  %833 = (%831, %832);
  %834 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %835 = concatenate(%833, axis=1);
  %836 = concatenate(%834, axis=1);
  %837 = nn.dense(%835, %836, units=None);
  %838 = add(%837, %rnn_bias_ih_l0);
  %839 = add(%838, %rnn_bias_hh_l0);
  %840 = split(%839, indices_or_sections=4, axis=-1);
  %841 = %840.3;
  %842 = %840.1;
  %843 = sigmoid(%842);
  %844 = %840.0;
  %845 = %840.2;
  %846 = sigmoid(%844);
  %847 = tanh(%845);
  %848 = multiply(%843, %828);
  %849 = multiply(%846, %847);
  %850 = add(%848, %849);
  %851 = sigmoid(%841);
  %852 = tanh(%850);
  %853 = multiply(%851, %852);
  %854 = (%106, %128, %150, %172, %194, %216, %238, %260, %282, %304, %326, %348, %370, %392, %414, %436, %458, %480, %502, %524, %546, %568, %590, %612, %634, %656, %678, %700, %722, %744, %766, %788, %810, %832, %853);
  stack(%854)
}
