#[version = "0.0.5"]
// LSTM with the following modifications:
// We unwrap the "%hidden" argument from a tuple into two separate tensors.
// We remove the first line that casts data to int32 from int64. we just assume data is int32.
def @main(%data: Tensor[(35, 10), int32], %hidden0: Tensor[(1, 10, 128), float32], %hidden1: Tensor[(1, 10, 128), float32], %encoder_weight: Tensor[(33278, 128), float32], %rnn_weight_ih_l0: Tensor[(512, 128), float32], %rnn_weight_hh_l0: Tensor[(512, 128), float32], %rnn_bias_ih_l0: Tensor[(512), float32], %rnn_bias_hh_l0: Tensor[(512), float32], %decoder_weight: Tensor[(33278, 128), float32], %decoder_bias: Tensor[(33278), float32]) {
  %1 = take(%encoder_weight, %data, axis=0);
  %2 = nn.dropout(%1, rate=0.2f);
  %3 = %2.0;
  %4 = split(%3, indices_or_sections=35);
  %5 = %4.0;
  %6 = %4.1;
  %7 = %4.2;
  %8 = %4.3;
  %9 = %4.4;
  %10 = %4.5;
  %11 = %4.6;
  %12 = %4.7;
  %13 = %4.8;
  %14 = %4.9;
  %15 = %4.10;
  %16 = %4.11;
  %17 = %4.12;
  %18 = %4.13;
  %19 = %4.14;
  %20 = %4.15;
  %21 = %4.16;
  %22 = %4.17;
  %23 = %4.18;
  %24 = %4.19;
  %25 = %4.20;
  %26 = %4.21;
  %27 = %4.22;
  %28 = %4.23;
  %29 = %4.24;
  %30 = %4.25;
  %31 = %4.26;
  %32 = %4.27;
  %33 = %4.28;
  %34 = %4.29;
  %35 = %4.30;
  %36 = %4.31;
  %37 = %4.32;
  %38 = %4.33;
  %39 = %4.34;
  %40 = squeeze(%5, axis=[0]);
  %41 = squeeze(%6, axis=[0]);
  %42 = squeeze(%7, axis=[0]);
  %43 = squeeze(%8, axis=[0]);
  %44 = squeeze(%9, axis=[0]);
  %45 = squeeze(%10, axis=[0]);
  %46 = squeeze(%11, axis=[0]);
  %47 = squeeze(%12, axis=[0]);
  %48 = squeeze(%13, axis=[0]);
  %49 = squeeze(%14, axis=[0]);
  %50 = squeeze(%15, axis=[0]);
  %51 = squeeze(%16, axis=[0]);
  %52 = squeeze(%17, axis=[0]);
  %53 = squeeze(%18, axis=[0]);
  %54 = squeeze(%19, axis=[0]);
  %55 = squeeze(%20, axis=[0]);
  %56 = squeeze(%21, axis=[0]);
  %57 = squeeze(%22, axis=[0]);
  %58 = squeeze(%23, axis=[0]);
  %59 = squeeze(%24, axis=[0]);
  %60 = squeeze(%25, axis=[0]);
  %61 = squeeze(%26, axis=[0]);
  %62 = squeeze(%27, axis=[0]);
  %63 = squeeze(%28, axis=[0]);
  %64 = squeeze(%29, axis=[0]);
  %65 = squeeze(%30, axis=[0]);
  %66 = squeeze(%31, axis=[0]);
  %67 = squeeze(%32, axis=[0]);
  %68 = squeeze(%33, axis=[0]);
  %69 = squeeze(%34, axis=[0]);
  %70 = squeeze(%35, axis=[0]);
  %71 = squeeze(%36, axis=[0]);
  %72 = squeeze(%37, axis=[0]);
  %73 = squeeze(%38, axis=[0]);
  %74 = squeeze(%39, axis=[0]);
  %75 = (%40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72, %73, %74);
  %76 = %hidden0;
  %77 = split(%76, indices_or_sections=1);
  %78 = %77.0;
  %79 = squeeze(%78, axis=[0]);
  %80 = (%79,);
  %81 = %75.0;
  %82 = %80.0;
  %83 = (%81, %82);
  %84 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %85 = concatenate(%83, axis=1);
  %86 = concatenate(%84, axis=1);
  %87 = nn.dense(%85, %86, units=None);
  %88 = add(%87, %rnn_bias_ih_l0);
  %89 = add(%88, %rnn_bias_hh_l0);
  %90 = split(%89, indices_or_sections=4, axis=-1);
  %91 = %90.3;
  %92 = %90.1;
  %93 = %hidden1;
  %94 = split(%93, indices_or_sections=1);
  %95 = %94.0;
  %96 = squeeze(%95, axis=[0]);
  %97 = (%96,);
  %98 = sigmoid(%92);
  %99 = %97.0;
  %100 = %90.0;
  %101 = %90.2;
  %102 = sigmoid(%100);
  %103 = tanh(%101);
  %104 = multiply(%98, %99);
  %105 = multiply(%102, %103);
  %106 = add(%104, %105);
  %107 = sigmoid(%91);
  %108 = tanh(%106);
  %109 = %75.1;
  %110 = multiply(%107, %108);
  %111 = (%109, %110);
  %112 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %113 = concatenate(%111, axis=1);
  %114 = concatenate(%112, axis=1);
  %115 = nn.dense(%113, %114, units=None);
  %116 = add(%115, %rnn_bias_ih_l0);
  %117 = add(%116, %rnn_bias_hh_l0);
  %118 = split(%117, indices_or_sections=4, axis=-1);
  %119 = %118.3;
  %120 = %118.1;
  %121 = sigmoid(%120);
  %122 = %118.0;
  %123 = %118.2;
  %124 = sigmoid(%122);
  %125 = tanh(%123);
  %126 = multiply(%121, %106);
  %127 = multiply(%124, %125);
  %128 = add(%126, %127);
  %129 = sigmoid(%119);
  %130 = tanh(%128);
  %131 = %75.2;
  %132 = multiply(%129, %130);
  %133 = (%131, %132);
  %134 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %135 = concatenate(%133, axis=1);
  %136 = concatenate(%134, axis=1);
  %137 = nn.dense(%135, %136, units=None);
  %138 = add(%137, %rnn_bias_ih_l0);
  %139 = add(%138, %rnn_bias_hh_l0);
  %140 = split(%139, indices_or_sections=4, axis=-1);
  %141 = %140.3;
  %142 = %140.1;
  %143 = sigmoid(%142);
  %144 = %140.0;
  %145 = %140.2;
  %146 = sigmoid(%144);
  %147 = tanh(%145);
  %148 = multiply(%143, %128);
  %149 = multiply(%146, %147);
  %150 = add(%148, %149);
  %151 = sigmoid(%141);
  %152 = tanh(%150);
  %153 = %75.3;
  %154 = multiply(%151, %152);
  %155 = (%153, %154);
  %156 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %157 = concatenate(%155, axis=1);
  %158 = concatenate(%156, axis=1);
  %159 = nn.dense(%157, %158, units=None);
  %160 = add(%159, %rnn_bias_ih_l0);
  %161 = add(%160, %rnn_bias_hh_l0);
  %162 = split(%161, indices_or_sections=4, axis=-1);
  %163 = %162.3;
  %164 = %162.1;
  %165 = sigmoid(%164);
  %166 = %162.0;
  %167 = %162.2;
  %168 = sigmoid(%166);
  %169 = tanh(%167);
  %170 = multiply(%165, %150);
  %171 = multiply(%168, %169);
  %172 = add(%170, %171);
  %173 = sigmoid(%163);
  %174 = tanh(%172);
  %175 = %75.4;
  %176 = multiply(%173, %174);
  %177 = (%175, %176);
  %178 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %179 = concatenate(%177, axis=1);
  %180 = concatenate(%178, axis=1);
  %181 = nn.dense(%179, %180, units=None);
  %182 = add(%181, %rnn_bias_ih_l0);
  %183 = add(%182, %rnn_bias_hh_l0);
  %184 = split(%183, indices_or_sections=4, axis=-1);
  %185 = %184.3;
  %186 = %184.1;
  %187 = sigmoid(%186);
  %188 = %184.0;
  %189 = %184.2;
  %190 = sigmoid(%188);
  %191 = tanh(%189);
  %192 = multiply(%187, %172);
  %193 = multiply(%190, %191);
  %194 = add(%192, %193);
  %195 = sigmoid(%185);
  %196 = tanh(%194);
  %197 = %75.5;
  %198 = multiply(%195, %196);
  %199 = (%197, %198);
  %200 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %201 = concatenate(%199, axis=1);
  %202 = concatenate(%200, axis=1);
  %203 = nn.dense(%201, %202, units=None);
  %204 = add(%203, %rnn_bias_ih_l0);
  %205 = add(%204, %rnn_bias_hh_l0);
  %206 = split(%205, indices_or_sections=4, axis=-1);
  %207 = %206.3;
  %208 = %206.1;
  %209 = sigmoid(%208);
  %210 = %206.0;
  %211 = %206.2;
  %212 = sigmoid(%210);
  %213 = tanh(%211);
  %214 = multiply(%209, %194);
  %215 = multiply(%212, %213);
  %216 = add(%214, %215);
  %217 = sigmoid(%207);
  %218 = tanh(%216);
  %219 = %75.6;
  %220 = multiply(%217, %218);
  %221 = (%219, %220);
  %222 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %223 = concatenate(%221, axis=1);
  %224 = concatenate(%222, axis=1);
  %225 = nn.dense(%223, %224, units=None);
  %226 = add(%225, %rnn_bias_ih_l0);
  %227 = add(%226, %rnn_bias_hh_l0);
  %228 = split(%227, indices_or_sections=4, axis=-1);
  %229 = %228.3;
  %230 = %228.1;
  %231 = sigmoid(%230);
  %232 = %228.0;
  %233 = %228.2;
  %234 = sigmoid(%232);
  %235 = tanh(%233);
  %236 = multiply(%231, %216);
  %237 = multiply(%234, %235);
  %238 = add(%236, %237);
  %239 = sigmoid(%229);
  %240 = tanh(%238);
  %241 = %75.7;
  %242 = multiply(%239, %240);
  %243 = (%241, %242);
  %244 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %245 = concatenate(%243, axis=1);
  %246 = concatenate(%244, axis=1);
  %247 = nn.dense(%245, %246, units=None);
  %248 = add(%247, %rnn_bias_ih_l0);
  %249 = add(%248, %rnn_bias_hh_l0);
  %250 = split(%249, indices_or_sections=4, axis=-1);
  %251 = %250.3;
  %252 = %250.1;
  %253 = sigmoid(%252);
  %254 = %250.0;
  %255 = %250.2;
  %256 = sigmoid(%254);
  %257 = tanh(%255);
  %258 = multiply(%253, %238);
  %259 = multiply(%256, %257);
  %260 = add(%258, %259);
  %261 = sigmoid(%251);
  %262 = tanh(%260);
  %263 = %75.8;
  %264 = multiply(%261, %262);
  %265 = (%263, %264);
  %266 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %267 = concatenate(%265, axis=1);
  %268 = concatenate(%266, axis=1);
  %269 = nn.dense(%267, %268, units=None);
  %270 = add(%269, %rnn_bias_ih_l0);
  %271 = add(%270, %rnn_bias_hh_l0);
  %272 = split(%271, indices_or_sections=4, axis=-1);
  %273 = %272.3;
  %274 = %272.1;
  %275 = sigmoid(%274);
  %276 = %272.0;
  %277 = %272.2;
  %278 = sigmoid(%276);
  %279 = tanh(%277);
  %280 = multiply(%275, %260);
  %281 = multiply(%278, %279);
  %282 = add(%280, %281);
  %283 = sigmoid(%273);
  %284 = tanh(%282);
  %285 = %75.9;
  %286 = multiply(%283, %284);
  %287 = (%285, %286);
  %288 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %289 = concatenate(%287, axis=1);
  %290 = concatenate(%288, axis=1);
  %291 = nn.dense(%289, %290, units=None);
  %292 = add(%291, %rnn_bias_ih_l0);
  %293 = add(%292, %rnn_bias_hh_l0);
  %294 = split(%293, indices_or_sections=4, axis=-1);
  %295 = %294.3;
  %296 = %294.1;
  %297 = sigmoid(%296);
  %298 = %294.0;
  %299 = %294.2;
  %300 = sigmoid(%298);
  %301 = tanh(%299);
  %302 = multiply(%297, %282);
  %303 = multiply(%300, %301);
  %304 = add(%302, %303);
  %305 = sigmoid(%295);
  %306 = tanh(%304);
  %307 = %75.10;
  %308 = multiply(%305, %306);
  %309 = (%307, %308);
  %310 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %311 = concatenate(%309, axis=1);
  %312 = concatenate(%310, axis=1);
  %313 = nn.dense(%311, %312, units=None);
  %314 = add(%313, %rnn_bias_ih_l0);
  %315 = add(%314, %rnn_bias_hh_l0);
  %316 = split(%315, indices_or_sections=4, axis=-1);
  %317 = %316.3;
  %318 = %316.1;
  %319 = sigmoid(%318);
  %320 = %316.0;
  %321 = %316.2;
  %322 = sigmoid(%320);
  %323 = tanh(%321);
  %324 = multiply(%319, %304);
  %325 = multiply(%322, %323);
  %326 = add(%324, %325);
  %327 = sigmoid(%317);
  %328 = tanh(%326);
  %329 = %75.11;
  %330 = multiply(%327, %328);
  %331 = (%329, %330);
  %332 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %333 = concatenate(%331, axis=1);
  %334 = concatenate(%332, axis=1);
  %335 = nn.dense(%333, %334, units=None);
  %336 = add(%335, %rnn_bias_ih_l0);
  %337 = add(%336, %rnn_bias_hh_l0);
  %338 = split(%337, indices_or_sections=4, axis=-1);
  %339 = %338.3;
  %340 = %338.1;
  %341 = sigmoid(%340);
  %342 = %338.0;
  %343 = %338.2;
  %344 = sigmoid(%342);
  %345 = tanh(%343);
  %346 = multiply(%341, %326);
  %347 = multiply(%344, %345);
  %348 = add(%346, %347);
  %349 = sigmoid(%339);
  %350 = tanh(%348);
  %351 = %75.12;
  %352 = multiply(%349, %350);
  %353 = (%351, %352);
  %354 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %355 = concatenate(%353, axis=1);
  %356 = concatenate(%354, axis=1);
  %357 = nn.dense(%355, %356, units=None);
  %358 = add(%357, %rnn_bias_ih_l0);
  %359 = add(%358, %rnn_bias_hh_l0);
  %360 = split(%359, indices_or_sections=4, axis=-1);
  %361 = %360.3;
  %362 = %360.1;
  %363 = sigmoid(%362);
  %364 = %360.0;
  %365 = %360.2;
  %366 = sigmoid(%364);
  %367 = tanh(%365);
  %368 = multiply(%363, %348);
  %369 = multiply(%366, %367);
  %370 = add(%368, %369);
  %371 = sigmoid(%361);
  %372 = tanh(%370);
  %373 = %75.13;
  %374 = multiply(%371, %372);
  %375 = (%373, %374);
  %376 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %377 = concatenate(%375, axis=1);
  %378 = concatenate(%376, axis=1);
  %379 = nn.dense(%377, %378, units=None);
  %380 = add(%379, %rnn_bias_ih_l0);
  %381 = add(%380, %rnn_bias_hh_l0);
  %382 = split(%381, indices_or_sections=4, axis=-1);
  %383 = %382.3;
  %384 = %382.1;
  %385 = sigmoid(%384);
  %386 = %382.0;
  %387 = %382.2;
  %388 = sigmoid(%386);
  %389 = tanh(%387);
  %390 = multiply(%385, %370);
  %391 = multiply(%388, %389);
  %392 = add(%390, %391);
  %393 = sigmoid(%383);
  %394 = tanh(%392);
  %395 = %75.14;
  %396 = multiply(%393, %394);
  %397 = (%395, %396);
  %398 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %399 = concatenate(%397, axis=1);
  %400 = concatenate(%398, axis=1);
  %401 = nn.dense(%399, %400, units=None);
  %402 = add(%401, %rnn_bias_ih_l0);
  %403 = add(%402, %rnn_bias_hh_l0);
  %404 = split(%403, indices_or_sections=4, axis=-1);
  %405 = %404.3;
  %406 = %404.1;
  %407 = sigmoid(%406);
  %408 = %404.0;
  %409 = %404.2;
  %410 = sigmoid(%408);
  %411 = tanh(%409);
  %412 = multiply(%407, %392);
  %413 = multiply(%410, %411);
  %414 = add(%412, %413);
  %415 = sigmoid(%405);
  %416 = tanh(%414);
  %417 = %75.15;
  %418 = multiply(%415, %416);
  %419 = (%417, %418);
  %420 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %421 = concatenate(%419, axis=1);
  %422 = concatenate(%420, axis=1);
  %423 = nn.dense(%421, %422, units=None);
  %424 = add(%423, %rnn_bias_ih_l0);
  %425 = add(%424, %rnn_bias_hh_l0);
  %426 = split(%425, indices_or_sections=4, axis=-1);
  %427 = %426.3;
  %428 = %426.1;
  %429 = sigmoid(%428);
  %430 = %426.0;
  %431 = %426.2;
  %432 = sigmoid(%430);
  %433 = tanh(%431);
  %434 = multiply(%429, %414);
  %435 = multiply(%432, %433);
  %436 = add(%434, %435);
  %437 = sigmoid(%427);
  %438 = tanh(%436);
  %439 = %75.16;
  %440 = multiply(%437, %438);
  %441 = (%439, %440);
  %442 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %443 = concatenate(%441, axis=1);
  %444 = concatenate(%442, axis=1);
  %445 = nn.dense(%443, %444, units=None);
  %446 = add(%445, %rnn_bias_ih_l0);
  %447 = add(%446, %rnn_bias_hh_l0);
  %448 = split(%447, indices_or_sections=4, axis=-1);
  %449 = %448.3;
  %450 = %448.1;
  %451 = sigmoid(%450);
  %452 = %448.0;
  %453 = %448.2;
  %454 = sigmoid(%452);
  %455 = tanh(%453);
  %456 = multiply(%451, %436);
  %457 = multiply(%454, %455);
  %458 = add(%456, %457);
  %459 = sigmoid(%449);
  %460 = tanh(%458);
  %461 = %75.17;
  %462 = multiply(%459, %460);
  %463 = (%461, %462);
  %464 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %465 = concatenate(%463, axis=1);
  %466 = concatenate(%464, axis=1);
  %467 = nn.dense(%465, %466, units=None);
  %468 = add(%467, %rnn_bias_ih_l0);
  %469 = add(%468, %rnn_bias_hh_l0);
  %470 = split(%469, indices_or_sections=4, axis=-1);
  %471 = %470.3;
  %472 = %470.1;
  %473 = sigmoid(%472);
  %474 = %470.0;
  %475 = %470.2;
  %476 = sigmoid(%474);
  %477 = tanh(%475);
  %478 = multiply(%473, %458);
  %479 = multiply(%476, %477);
  %480 = add(%478, %479);
  %481 = sigmoid(%471);
  %482 = tanh(%480);
  %483 = %75.18;
  %484 = multiply(%481, %482);
  %485 = (%483, %484);
  %486 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %487 = concatenate(%485, axis=1);
  %488 = concatenate(%486, axis=1);
  %489 = nn.dense(%487, %488, units=None);
  %490 = add(%489, %rnn_bias_ih_l0);
  %491 = add(%490, %rnn_bias_hh_l0);
  %492 = split(%491, indices_or_sections=4, axis=-1);
  %493 = %492.3;
  %494 = %492.1;
  %495 = sigmoid(%494);
  %496 = %492.0;
  %497 = %492.2;
  %498 = sigmoid(%496);
  %499 = tanh(%497);
  %500 = multiply(%495, %480);
  %501 = multiply(%498, %499);
  %502 = add(%500, %501);
  %503 = sigmoid(%493);
  %504 = tanh(%502);
  %505 = %75.19;
  %506 = multiply(%503, %504);
  %507 = (%505, %506);
  %508 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %509 = concatenate(%507, axis=1);
  %510 = concatenate(%508, axis=1);
  %511 = nn.dense(%509, %510, units=None);
  %512 = add(%511, %rnn_bias_ih_l0);
  %513 = add(%512, %rnn_bias_hh_l0);
  %514 = split(%513, indices_or_sections=4, axis=-1);
  %515 = %514.3;
  %516 = %514.1;
  %517 = sigmoid(%516);
  %518 = %514.0;
  %519 = %514.2;
  %520 = sigmoid(%518);
  %521 = tanh(%519);
  %522 = multiply(%517, %502);
  %523 = multiply(%520, %521);
  %524 = add(%522, %523);
  %525 = sigmoid(%515);
  %526 = tanh(%524);
  %527 = %75.20;
  %528 = multiply(%525, %526);
  %529 = (%527, %528);
  %530 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %531 = concatenate(%529, axis=1);
  %532 = concatenate(%530, axis=1);
  %533 = nn.dense(%531, %532, units=None);
  %534 = add(%533, %rnn_bias_ih_l0);
  %535 = add(%534, %rnn_bias_hh_l0);
  %536 = split(%535, indices_or_sections=4, axis=-1);
  %537 = %536.3;
  %538 = %536.1;
  %539 = sigmoid(%538);
  %540 = %536.0;
  %541 = %536.2;
  %542 = sigmoid(%540);
  %543 = tanh(%541);
  %544 = multiply(%539, %524);
  %545 = multiply(%542, %543);
  %546 = add(%544, %545);
  %547 = sigmoid(%537);
  %548 = tanh(%546);
  %549 = %75.21;
  %550 = multiply(%547, %548);
  %551 = (%549, %550);
  %552 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %553 = concatenate(%551, axis=1);
  %554 = concatenate(%552, axis=1);
  %555 = nn.dense(%553, %554, units=None);
  %556 = add(%555, %rnn_bias_ih_l0);
  %557 = add(%556, %rnn_bias_hh_l0);
  %558 = split(%557, indices_or_sections=4, axis=-1);
  %559 = %558.3;
  %560 = %558.1;
  %561 = sigmoid(%560);
  %562 = %558.0;
  %563 = %558.2;
  %564 = sigmoid(%562);
  %565 = tanh(%563);
  %566 = multiply(%561, %546);
  %567 = multiply(%564, %565);
  %568 = add(%566, %567);
  %569 = sigmoid(%559);
  %570 = tanh(%568);
  %571 = %75.22;
  %572 = multiply(%569, %570);
  %573 = (%571, %572);
  %574 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %575 = concatenate(%573, axis=1);
  %576 = concatenate(%574, axis=1);
  %577 = nn.dense(%575, %576, units=None);
  %578 = add(%577, %rnn_bias_ih_l0);
  %579 = add(%578, %rnn_bias_hh_l0);
  %580 = split(%579, indices_or_sections=4, axis=-1);
  %581 = %580.3;
  %582 = %580.1;
  %583 = sigmoid(%582);
  %584 = %580.0;
  %585 = %580.2;
  %586 = sigmoid(%584);
  %587 = tanh(%585);
  %588 = multiply(%583, %568);
  %589 = multiply(%586, %587);
  %590 = add(%588, %589);
  %591 = sigmoid(%581);
  %592 = tanh(%590);
  %593 = %75.23;
  %594 = multiply(%591, %592);
  %595 = (%593, %594);
  %596 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %597 = concatenate(%595, axis=1);
  %598 = concatenate(%596, axis=1);
  %599 = nn.dense(%597, %598, units=None);
  %600 = add(%599, %rnn_bias_ih_l0);
  %601 = add(%600, %rnn_bias_hh_l0);
  %602 = split(%601, indices_or_sections=4, axis=-1);
  %603 = %602.3;
  %604 = %602.1;
  %605 = sigmoid(%604);
  %606 = %602.0;
  %607 = %602.2;
  %608 = sigmoid(%606);
  %609 = tanh(%607);
  %610 = multiply(%605, %590);
  %611 = multiply(%608, %609);
  %612 = add(%610, %611);
  %613 = sigmoid(%603);
  %614 = tanh(%612);
  %615 = %75.24;
  %616 = multiply(%613, %614);
  %617 = (%615, %616);
  %618 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %619 = concatenate(%617, axis=1);
  %620 = concatenate(%618, axis=1);
  %621 = nn.dense(%619, %620, units=None);
  %622 = add(%621, %rnn_bias_ih_l0);
  %623 = add(%622, %rnn_bias_hh_l0);
  %624 = split(%623, indices_or_sections=4, axis=-1);
  %625 = %624.3;
  %626 = %624.1;
  %627 = sigmoid(%626);
  %628 = %624.0;
  %629 = %624.2;
  %630 = sigmoid(%628);
  %631 = tanh(%629);
  %632 = multiply(%627, %612);
  %633 = multiply(%630, %631);
  %634 = add(%632, %633);
  %635 = sigmoid(%625);
  %636 = tanh(%634);
  %637 = %75.25;
  %638 = multiply(%635, %636);
  %639 = (%637, %638);
  %640 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %641 = concatenate(%639, axis=1);
  %642 = concatenate(%640, axis=1);
  %643 = nn.dense(%641, %642, units=None);
  %644 = add(%643, %rnn_bias_ih_l0);
  %645 = add(%644, %rnn_bias_hh_l0);
  %646 = split(%645, indices_or_sections=4, axis=-1);
  %647 = %646.3;
  %648 = %646.1;
  %649 = sigmoid(%648);
  %650 = %646.0;
  %651 = %646.2;
  %652 = sigmoid(%650);
  %653 = tanh(%651);
  %654 = multiply(%649, %634);
  %655 = multiply(%652, %653);
  %656 = add(%654, %655);
  %657 = sigmoid(%647);
  %658 = tanh(%656);
  %659 = %75.26;
  %660 = multiply(%657, %658);
  %661 = (%659, %660);
  %662 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %663 = concatenate(%661, axis=1);
  %664 = concatenate(%662, axis=1);
  %665 = nn.dense(%663, %664, units=None);
  %666 = add(%665, %rnn_bias_ih_l0);
  %667 = add(%666, %rnn_bias_hh_l0);
  %668 = split(%667, indices_or_sections=4, axis=-1);
  %669 = %668.3;
  %670 = %668.1;
  %671 = sigmoid(%670);
  %672 = %668.0;
  %673 = %668.2;
  %674 = sigmoid(%672);
  %675 = tanh(%673);
  %676 = multiply(%671, %656);
  %677 = multiply(%674, %675);
  %678 = add(%676, %677);
  %679 = sigmoid(%669);
  %680 = tanh(%678);
  %681 = %75.27;
  %682 = multiply(%679, %680);
  %683 = (%681, %682);
  %684 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %685 = concatenate(%683, axis=1);
  %686 = concatenate(%684, axis=1);
  %687 = nn.dense(%685, %686, units=None);
  %688 = add(%687, %rnn_bias_ih_l0);
  %689 = add(%688, %rnn_bias_hh_l0);
  %690 = split(%689, indices_or_sections=4, axis=-1);
  %691 = %690.3;
  %692 = %690.1;
  %693 = sigmoid(%692);
  %694 = %690.0;
  %695 = %690.2;
  %696 = sigmoid(%694);
  %697 = tanh(%695);
  %698 = multiply(%693, %678);
  %699 = multiply(%696, %697);
  %700 = add(%698, %699);
  %701 = sigmoid(%691);
  %702 = tanh(%700);
  %703 = %75.28;
  %704 = multiply(%701, %702);
  %705 = (%703, %704);
  %706 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %707 = concatenate(%705, axis=1);
  %708 = concatenate(%706, axis=1);
  %709 = nn.dense(%707, %708, units=None);
  %710 = add(%709, %rnn_bias_ih_l0);
  %711 = add(%710, %rnn_bias_hh_l0);
  %712 = split(%711, indices_or_sections=4, axis=-1);
  %713 = %712.3;
  %714 = %712.1;
  %715 = sigmoid(%714);
  %716 = %712.0;
  %717 = %712.2;
  %718 = sigmoid(%716);
  %719 = tanh(%717);
  %720 = multiply(%715, %700);
  %721 = multiply(%718, %719);
  %722 = add(%720, %721);
  %723 = sigmoid(%713);
  %724 = tanh(%722);
  %725 = %75.29;
  %726 = multiply(%723, %724);
  %727 = (%725, %726);
  %728 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %729 = concatenate(%727, axis=1);
  %730 = concatenate(%728, axis=1);
  %731 = nn.dense(%729, %730, units=None);
  %732 = add(%731, %rnn_bias_ih_l0);
  %733 = add(%732, %rnn_bias_hh_l0);
  %734 = split(%733, indices_or_sections=4, axis=-1);
  %735 = %734.3;
  %736 = %734.1;
  %737 = sigmoid(%736);
  %738 = %734.0;
  %739 = %734.2;
  %740 = sigmoid(%738);
  %741 = tanh(%739);
  %742 = multiply(%737, %722);
  %743 = multiply(%740, %741);
  %744 = add(%742, %743);
  %745 = sigmoid(%735);
  %746 = tanh(%744);
  %747 = %75.30;
  %748 = multiply(%745, %746);
  %749 = (%747, %748);
  %750 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %751 = concatenate(%749, axis=1);
  %752 = concatenate(%750, axis=1);
  %753 = nn.dense(%751, %752, units=None);
  %754 = add(%753, %rnn_bias_ih_l0);
  %755 = add(%754, %rnn_bias_hh_l0);
  %756 = split(%755, indices_or_sections=4, axis=-1);
  %757 = %756.3;
  %758 = %756.1;
  %759 = sigmoid(%758);
  %760 = %756.0;
  %761 = %756.2;
  %762 = sigmoid(%760);
  %763 = tanh(%761);
  %764 = multiply(%759, %744);
  %765 = multiply(%762, %763);
  %766 = add(%764, %765);
  %767 = sigmoid(%757);
  %768 = tanh(%766);
  %769 = %75.31;
  %770 = multiply(%767, %768);
  %771 = (%769, %770);
  %772 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %773 = concatenate(%771, axis=1);
  %774 = concatenate(%772, axis=1);
  %775 = nn.dense(%773, %774, units=None);
  %776 = add(%775, %rnn_bias_ih_l0);
  %777 = add(%776, %rnn_bias_hh_l0);
  %778 = split(%777, indices_or_sections=4, axis=-1);
  %779 = %778.3;
  %780 = %778.1;
  %781 = sigmoid(%780);
  %782 = %778.0;
  %783 = %778.2;
  %784 = sigmoid(%782);
  %785 = tanh(%783);
  %786 = multiply(%781, %766);
  %787 = multiply(%784, %785);
  %788 = add(%786, %787);
  %789 = sigmoid(%779);
  %790 = tanh(%788);
  %791 = %75.32;
  %792 = multiply(%789, %790);
  %793 = (%791, %792);
  %794 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %795 = concatenate(%793, axis=1);
  %796 = concatenate(%794, axis=1);
  %797 = nn.dense(%795, %796, units=None);
  %798 = add(%797, %rnn_bias_ih_l0);
  %799 = add(%798, %rnn_bias_hh_l0);
  %800 = split(%799, indices_or_sections=4, axis=-1);
  %801 = %800.3;
  %802 = %800.1;
  %803 = sigmoid(%802);
  %804 = %800.0;
  %805 = %800.2;
  %806 = sigmoid(%804);
  %807 = tanh(%805);
  %808 = multiply(%803, %788);
  %809 = multiply(%806, %807);
  %810 = add(%808, %809);
  %811 = sigmoid(%801);
  %812 = tanh(%810);
  %813 = %75.33;
  %814 = multiply(%811, %812);
  %815 = (%813, %814);
  %816 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %817 = concatenate(%815, axis=1);
  %818 = concatenate(%816, axis=1);
  %819 = nn.dense(%817, %818, units=None);
  %820 = add(%819, %rnn_bias_ih_l0);
  %821 = add(%820, %rnn_bias_hh_l0);
  %822 = split(%821, indices_or_sections=4, axis=-1);
  %823 = %822.3;
  %824 = %822.1;
  %825 = sigmoid(%824);
  %826 = %822.0;
  %827 = %822.2;
  %828 = sigmoid(%826);
  %829 = tanh(%827);
  %830 = multiply(%825, %810);
  %831 = multiply(%828, %829);
  %832 = add(%830, %831);
  %833 = sigmoid(%823);
  %834 = tanh(%832);
  %835 = %75.34;
  %836 = multiply(%833, %834);
  %837 = (%835, %836);
  %838 = (%rnn_weight_ih_l0, %rnn_weight_hh_l0);
  %839 = concatenate(%837, axis=1);
  %840 = concatenate(%838, axis=1);
  %841 = nn.dense(%839, %840, units=None);
  %842 = add(%841, %rnn_bias_ih_l0);
  %843 = add(%842, %rnn_bias_hh_l0);
  %844 = split(%843, indices_or_sections=4, axis=-1);
  %845 = %844.3;
  %846 = %844.1;
  %847 = sigmoid(%846);
  %848 = %844.0;
  %849 = %844.2;
  %850 = sigmoid(%848);
  %851 = tanh(%849);
  %852 = multiply(%847, %832);
  %853 = multiply(%850, %851);
  %854 = add(%852, %853);
  %855 = sigmoid(%845);
  %856 = tanh(%854);
  %857 = multiply(%855, %856);
  %858 = (%110, %132, %154, %176, %198, %220, %242, %264, %286, %308, %330, %352, %374, %396, %418, %440, %462, %484, %506, %528, %550, %572, %594, %616, %638, %660, %682, %704, %726, %748, %770, %792, %814, %836, %857);
  %859 = stack(%858);
  %860 = ();
  %861 = ();
  %862 = (%859, %860, %861);
  %863 = %862.0;
  %864 = nn.dropout(%863, rate=0.2f);
  %865 = %864.0;
  %866 = transpose(%decoder_weight, axes=[1, 0]);
  %867 = reshape(%865, newshape=[-1, 128]);
  %868 = transpose(%866, axes=[1, 0]);
  %869 = nn.dense(%867, %868, units=None);
  %870 = reshape(%869, newshape=[35, 10, 33278]);
  %871 = add(%870, %decoder_bias);
  %872 = reshape(%871, newshape=[-1, 33278]);
  %873 = %862.1;
  %874 = %862.2;
  %875 = nn.log_softmax(%872, axis=1);
  %876 = (%873, %874);
  (%875, %876)
}