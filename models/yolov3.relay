#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 416, 416), float32], %LAYERTYPE_CONVOLUTIONAL0_weight: Tensor[(32, 3, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL0_gamma: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL0_beta: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL0_moving_mean: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL0_moving_var: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL1_weight: Tensor[(64, 32, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL1_gamma: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL1_beta: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL1_moving_mean: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL1_moving_var: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL2_weight: Tensor[(32, 64, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL2_gamma: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL2_beta: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL2_moving_mean: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL2_moving_var: Tensor[(32), float32], %LAYERTYPE_CONVOLUTIONAL3_weight: Tensor[(64, 32, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL3_gamma: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL3_beta: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL3_moving_mean: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL3_moving_var: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL5_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL5_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL5_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL5_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL5_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL6_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL6_gamma: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL6_beta: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL6_moving_mean: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL6_moving_var: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL7_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL7_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL7_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL7_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL7_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL9_weight: Tensor[(64, 128, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL9_gamma: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL9_beta: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL9_moving_mean: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL9_moving_var: Tensor[(64), float32], %LAYERTYPE_CONVOLUTIONAL10_weight: Tensor[(128, 64, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL10_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL10_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL10_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL10_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL12_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL12_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL12_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL12_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL12_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL13_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL13_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL13_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL13_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL13_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL14_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL14_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL14_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL14_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL14_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL16_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL16_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL16_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL16_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL16_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL17_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL17_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL17_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL17_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL17_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL19_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL19_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL19_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL19_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL19_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL20_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL20_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL20_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL20_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL20_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL22_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL22_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL22_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL22_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL22_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL23_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL23_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL23_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL23_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL23_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL25_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL25_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL25_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL25_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL25_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL26_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL26_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL26_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL26_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL26_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL28_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL28_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL28_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL28_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL28_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL29_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL29_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL29_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL29_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL29_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL31_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL31_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL31_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL31_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL31_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL32_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL32_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL32_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL32_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL32_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL34_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL34_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL34_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL34_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL34_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL35_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL35_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL35_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL35_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL35_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL37_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL37_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL37_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL37_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL37_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL38_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL38_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL38_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL38_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL38_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL39_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL39_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL39_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL39_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL39_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL41_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL41_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL41_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL41_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL41_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL42_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL42_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL42_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL42_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL42_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL44_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL44_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL44_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL44_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL44_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL45_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL45_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL45_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL45_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL45_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL47_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL47_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL47_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL47_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL47_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL48_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL48_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL48_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL48_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL48_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL50_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL50_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL50_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL50_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL50_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL51_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL51_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL51_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL51_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL51_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL53_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL53_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL53_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL53_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL53_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL54_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL54_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL54_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL54_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL54_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL56_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL56_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL56_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL56_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL56_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL57_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL57_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL57_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL57_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL57_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL59_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL59_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL59_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL59_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL59_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL60_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL60_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL60_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL60_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL60_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL62_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL62_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL62_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL62_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL62_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL63_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL63_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL63_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL63_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL63_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL64_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL64_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL64_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL64_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL64_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL66_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL66_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL66_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL66_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL66_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL67_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL67_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL67_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL67_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL67_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL69_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL69_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL69_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL69_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL69_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL70_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL70_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL70_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL70_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL70_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL72_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL72_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL72_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL72_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL72_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL73_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL73_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL73_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL73_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL73_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL75_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL75_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL75_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL75_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL75_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL76_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL76_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL76_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL76_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL76_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL77_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL77_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL77_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL77_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL77_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL78_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL78_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL78_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL78_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL78_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL79_weight: Tensor[(512, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL79_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL79_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL79_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL79_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL84_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL84_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL84_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL84_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL84_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL87_weight: Tensor[(256, 768, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL87_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL87_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL87_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL87_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL88_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL88_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL88_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL88_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL88_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL89_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL89_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL89_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL89_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL89_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL90_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL90_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL90_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL90_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL90_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL91_weight: Tensor[(256, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL91_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL91_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL91_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL91_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL96_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL96_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL96_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL96_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL96_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL99_weight: Tensor[(128, 384, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL99_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL99_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL99_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL99_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL100_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL100_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL100_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL100_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL100_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL101_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL101_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL101_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL101_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL101_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL102_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL102_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL102_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL102_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL102_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL103_weight: Tensor[(128, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL103_gamma: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL103_beta: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL103_moving_mean: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL103_moving_var: Tensor[(128), float32], %LAYERTYPE_CONVOLUTIONAL104_weight: Tensor[(256, 128, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL104_gamma: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL104_beta: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL104_moving_mean: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL104_moving_var: Tensor[(256), float32], %LAYERTYPE_CONVOLUTIONAL105_weight: Tensor[(255, 256, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL105_bias: Tensor[(255), float32], %LAYERTYPE_YOLO106_mask: Tensor[(3), int32], %LAYERTYPE_YOLO106_bias: Tensor[(18), float32], %LAYERTYPE_YOLO106_attr: Tensor[(6), int32], %LAYERTYPE_CONVOLUTIONAL92_weight: Tensor[(512, 256, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL92_gamma: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL92_beta: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL92_moving_mean: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL92_moving_var: Tensor[(512), float32], %LAYERTYPE_CONVOLUTIONAL93_weight: Tensor[(255, 512, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL93_bias: Tensor[(255), float32], %LAYERTYPE_YOLO94_mask: Tensor[(3), int32], %LAYERTYPE_YOLO94_bias: Tensor[(18), float32], %LAYERTYPE_YOLO94_attr: Tensor[(6), int32], %LAYERTYPE_CONVOLUTIONAL80_weight: Tensor[(1024, 512, 3, 3), float32], %LAYERTYPE_CONVOLUTIONAL80_gamma: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL80_beta: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL80_moving_mean: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL80_moving_var: Tensor[(1024), float32], %LAYERTYPE_CONVOLUTIONAL81_weight: Tensor[(255, 1024, 1, 1), float32], %LAYERTYPE_CONVOLUTIONAL81_bias: Tensor[(255), float32], %LAYERTYPE_YOLO82_mask: Tensor[(3), int32], %LAYERTYPE_YOLO82_bias: Tensor[(18), float32], %LAYERTYPE_YOLO82_attr: Tensor[(6), int32]) -> (Tensor[(1, 255, 52, 52), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32], Tensor[(1, 255, 26, 26), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32], Tensor[(1, 255, 13, 13), float32], Tensor[(3), int32], Tensor[(18), float32], Tensor[(6), int32]) {
  %0 = nn.conv2d(%data, %LAYERTYPE_CONVOLUTIONAL0_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 416, 416), float32] */;
  %1 = nn.batch_norm(%0, %LAYERTYPE_CONVOLUTIONAL0_gamma, %LAYERTYPE_CONVOLUTIONAL0_beta, %LAYERTYPE_CONVOLUTIONAL0_moving_mean, %LAYERTYPE_CONVOLUTIONAL0_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 32, 416, 416), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %2 = %1.0;
  %3 = nn.leaky_relu(%2, alpha=0.1f) /* ty=Tensor[(1, 32, 416, 416), float32] */;
  %4 = nn.conv2d(%3, %LAYERTYPE_CONVOLUTIONAL1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %5 = nn.batch_norm(%4, %LAYERTYPE_CONVOLUTIONAL1_gamma, %LAYERTYPE_CONVOLUTIONAL1_beta, %LAYERTYPE_CONVOLUTIONAL1_moving_mean, %LAYERTYPE_CONVOLUTIONAL1_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 208, 208), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %6 = %5.0;
  %7 = nn.leaky_relu(%6, alpha=0.1f) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %8 = nn.conv2d(%7, %LAYERTYPE_CONVOLUTIONAL2_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 208, 208), float32] */;
  %9 = nn.batch_norm(%8, %LAYERTYPE_CONVOLUTIONAL2_gamma, %LAYERTYPE_CONVOLUTIONAL2_beta, %LAYERTYPE_CONVOLUTIONAL2_moving_mean, %LAYERTYPE_CONVOLUTIONAL2_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 32, 208, 208), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %10 = %9.0;
  %11 = nn.leaky_relu(%10, alpha=0.1f) /* ty=Tensor[(1, 32, 208, 208), float32] */;
  %12 = nn.conv2d(%11, %LAYERTYPE_CONVOLUTIONAL3_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %13 = nn.batch_norm(%12, %LAYERTYPE_CONVOLUTIONAL3_gamma, %LAYERTYPE_CONVOLUTIONAL3_beta, %LAYERTYPE_CONVOLUTIONAL3_moving_mean, %LAYERTYPE_CONVOLUTIONAL3_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 208, 208), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %14 = %13.0;
  %15 = nn.leaky_relu(%14, alpha=0.1f) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %16 = add(%15, %7) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %17 = nn.conv2d(%16, %LAYERTYPE_CONVOLUTIONAL5_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %18 = nn.batch_norm(%17, %LAYERTYPE_CONVOLUTIONAL5_gamma, %LAYERTYPE_CONVOLUTIONAL5_beta, %LAYERTYPE_CONVOLUTIONAL5_moving_mean, %LAYERTYPE_CONVOLUTIONAL5_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 104, 104), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %19 = %18.0;
  %20 = nn.leaky_relu(%19, alpha=0.1f) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %21 = nn.conv2d(%20, %LAYERTYPE_CONVOLUTIONAL6_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 104, 104), float32] */;
  %22 = nn.batch_norm(%21, %LAYERTYPE_CONVOLUTIONAL6_gamma, %LAYERTYPE_CONVOLUTIONAL6_beta, %LAYERTYPE_CONVOLUTIONAL6_moving_mean, %LAYERTYPE_CONVOLUTIONAL6_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 104, 104), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %23 = %22.0;
  %24 = nn.leaky_relu(%23, alpha=0.1f) /* ty=Tensor[(1, 64, 104, 104), float32] */;
  %25 = nn.conv2d(%24, %LAYERTYPE_CONVOLUTIONAL7_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %26 = nn.batch_norm(%25, %LAYERTYPE_CONVOLUTIONAL7_gamma, %LAYERTYPE_CONVOLUTIONAL7_beta, %LAYERTYPE_CONVOLUTIONAL7_moving_mean, %LAYERTYPE_CONVOLUTIONAL7_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 104, 104), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %27 = %26.0;
  %28 = nn.leaky_relu(%27, alpha=0.1f) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %29 = add(%28, %20) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %30 = nn.conv2d(%29, %LAYERTYPE_CONVOLUTIONAL9_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 104, 104), float32] */;
  %31 = nn.batch_norm(%30, %LAYERTYPE_CONVOLUTIONAL9_gamma, %LAYERTYPE_CONVOLUTIONAL9_beta, %LAYERTYPE_CONVOLUTIONAL9_moving_mean, %LAYERTYPE_CONVOLUTIONAL9_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 64, 104, 104), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %32 = %31.0;
  %33 = nn.leaky_relu(%32, alpha=0.1f) /* ty=Tensor[(1, 64, 104, 104), float32] */;
  %34 = nn.conv2d(%33, %LAYERTYPE_CONVOLUTIONAL10_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %35 = nn.batch_norm(%34, %LAYERTYPE_CONVOLUTIONAL10_gamma, %LAYERTYPE_CONVOLUTIONAL10_beta, %LAYERTYPE_CONVOLUTIONAL10_moving_mean, %LAYERTYPE_CONVOLUTIONAL10_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 104, 104), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %36 = %35.0;
  %37 = nn.leaky_relu(%36, alpha=0.1f) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %38 = add(%37, %29) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %39 = nn.conv2d(%38, %LAYERTYPE_CONVOLUTIONAL12_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %40 = nn.batch_norm(%39, %LAYERTYPE_CONVOLUTIONAL12_gamma, %LAYERTYPE_CONVOLUTIONAL12_beta, %LAYERTYPE_CONVOLUTIONAL12_moving_mean, %LAYERTYPE_CONVOLUTIONAL12_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %41 = %40.0;
  %42 = nn.leaky_relu(%41, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %43 = nn.conv2d(%42, %LAYERTYPE_CONVOLUTIONAL13_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %44 = nn.batch_norm(%43, %LAYERTYPE_CONVOLUTIONAL13_gamma, %LAYERTYPE_CONVOLUTIONAL13_beta, %LAYERTYPE_CONVOLUTIONAL13_moving_mean, %LAYERTYPE_CONVOLUTIONAL13_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %45 = %44.0;
  %46 = nn.leaky_relu(%45, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %47 = nn.conv2d(%46, %LAYERTYPE_CONVOLUTIONAL14_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %48 = nn.batch_norm(%47, %LAYERTYPE_CONVOLUTIONAL14_gamma, %LAYERTYPE_CONVOLUTIONAL14_beta, %LAYERTYPE_CONVOLUTIONAL14_moving_mean, %LAYERTYPE_CONVOLUTIONAL14_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %49 = %48.0;
  %50 = nn.leaky_relu(%49, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %51 = add(%50, %42) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %52 = nn.conv2d(%51, %LAYERTYPE_CONVOLUTIONAL16_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %53 = nn.batch_norm(%52, %LAYERTYPE_CONVOLUTIONAL16_gamma, %LAYERTYPE_CONVOLUTIONAL16_beta, %LAYERTYPE_CONVOLUTIONAL16_moving_mean, %LAYERTYPE_CONVOLUTIONAL16_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %54 = %53.0;
  %55 = nn.leaky_relu(%54, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %56 = nn.conv2d(%55, %LAYERTYPE_CONVOLUTIONAL17_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %57 = nn.batch_norm(%56, %LAYERTYPE_CONVOLUTIONAL17_gamma, %LAYERTYPE_CONVOLUTIONAL17_beta, %LAYERTYPE_CONVOLUTIONAL17_moving_mean, %LAYERTYPE_CONVOLUTIONAL17_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %58 = %57.0;
  %59 = nn.leaky_relu(%58, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %60 = add(%59, %51) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %61 = nn.conv2d(%60, %LAYERTYPE_CONVOLUTIONAL19_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %62 = nn.batch_norm(%61, %LAYERTYPE_CONVOLUTIONAL19_gamma, %LAYERTYPE_CONVOLUTIONAL19_beta, %LAYERTYPE_CONVOLUTIONAL19_moving_mean, %LAYERTYPE_CONVOLUTIONAL19_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %63 = %62.0;
  %64 = nn.leaky_relu(%63, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %65 = nn.conv2d(%64, %LAYERTYPE_CONVOLUTIONAL20_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %66 = nn.batch_norm(%65, %LAYERTYPE_CONVOLUTIONAL20_gamma, %LAYERTYPE_CONVOLUTIONAL20_beta, %LAYERTYPE_CONVOLUTIONAL20_moving_mean, %LAYERTYPE_CONVOLUTIONAL20_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %67 = %66.0;
  %68 = nn.leaky_relu(%67, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %69 = add(%68, %60) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %70 = nn.conv2d(%69, %LAYERTYPE_CONVOLUTIONAL22_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %71 = nn.batch_norm(%70, %LAYERTYPE_CONVOLUTIONAL22_gamma, %LAYERTYPE_CONVOLUTIONAL22_beta, %LAYERTYPE_CONVOLUTIONAL22_moving_mean, %LAYERTYPE_CONVOLUTIONAL22_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %72 = %71.0;
  %73 = nn.leaky_relu(%72, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %74 = nn.conv2d(%73, %LAYERTYPE_CONVOLUTIONAL23_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %75 = nn.batch_norm(%74, %LAYERTYPE_CONVOLUTIONAL23_gamma, %LAYERTYPE_CONVOLUTIONAL23_beta, %LAYERTYPE_CONVOLUTIONAL23_moving_mean, %LAYERTYPE_CONVOLUTIONAL23_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %76 = %75.0;
  %77 = nn.leaky_relu(%76, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %78 = add(%77, %69) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %79 = nn.conv2d(%78, %LAYERTYPE_CONVOLUTIONAL25_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %80 = nn.batch_norm(%79, %LAYERTYPE_CONVOLUTIONAL25_gamma, %LAYERTYPE_CONVOLUTIONAL25_beta, %LAYERTYPE_CONVOLUTIONAL25_moving_mean, %LAYERTYPE_CONVOLUTIONAL25_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %81 = %80.0;
  %82 = nn.leaky_relu(%81, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %83 = nn.conv2d(%82, %LAYERTYPE_CONVOLUTIONAL26_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %84 = nn.batch_norm(%83, %LAYERTYPE_CONVOLUTIONAL26_gamma, %LAYERTYPE_CONVOLUTIONAL26_beta, %LAYERTYPE_CONVOLUTIONAL26_moving_mean, %LAYERTYPE_CONVOLUTIONAL26_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %85 = %84.0;
  %86 = nn.leaky_relu(%85, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %87 = add(%86, %78) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %88 = nn.conv2d(%87, %LAYERTYPE_CONVOLUTIONAL28_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %89 = nn.batch_norm(%88, %LAYERTYPE_CONVOLUTIONAL28_gamma, %LAYERTYPE_CONVOLUTIONAL28_beta, %LAYERTYPE_CONVOLUTIONAL28_moving_mean, %LAYERTYPE_CONVOLUTIONAL28_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %90 = %89.0;
  %91 = nn.leaky_relu(%90, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %92 = nn.conv2d(%91, %LAYERTYPE_CONVOLUTIONAL29_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %93 = nn.batch_norm(%92, %LAYERTYPE_CONVOLUTIONAL29_gamma, %LAYERTYPE_CONVOLUTIONAL29_beta, %LAYERTYPE_CONVOLUTIONAL29_moving_mean, %LAYERTYPE_CONVOLUTIONAL29_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %94 = %93.0;
  %95 = nn.leaky_relu(%94, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %96 = add(%95, %87) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %97 = nn.conv2d(%96, %LAYERTYPE_CONVOLUTIONAL31_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %98 = nn.batch_norm(%97, %LAYERTYPE_CONVOLUTIONAL31_gamma, %LAYERTYPE_CONVOLUTIONAL31_beta, %LAYERTYPE_CONVOLUTIONAL31_moving_mean, %LAYERTYPE_CONVOLUTIONAL31_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %99 = %98.0;
  %100 = nn.leaky_relu(%99, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %101 = nn.conv2d(%100, %LAYERTYPE_CONVOLUTIONAL32_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %102 = nn.batch_norm(%101, %LAYERTYPE_CONVOLUTIONAL32_gamma, %LAYERTYPE_CONVOLUTIONAL32_beta, %LAYERTYPE_CONVOLUTIONAL32_moving_mean, %LAYERTYPE_CONVOLUTIONAL32_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %103 = %102.0;
  %104 = nn.leaky_relu(%103, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %105 = add(%104, %96) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %106 = nn.conv2d(%105, %LAYERTYPE_CONVOLUTIONAL34_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %107 = nn.batch_norm(%106, %LAYERTYPE_CONVOLUTIONAL34_gamma, %LAYERTYPE_CONVOLUTIONAL34_beta, %LAYERTYPE_CONVOLUTIONAL34_moving_mean, %LAYERTYPE_CONVOLUTIONAL34_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %108 = %107.0;
  %109 = nn.leaky_relu(%108, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %110 = nn.conv2d(%109, %LAYERTYPE_CONVOLUTIONAL35_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %111 = nn.batch_norm(%110, %LAYERTYPE_CONVOLUTIONAL35_gamma, %LAYERTYPE_CONVOLUTIONAL35_beta, %LAYERTYPE_CONVOLUTIONAL35_moving_mean, %LAYERTYPE_CONVOLUTIONAL35_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %112 = %111.0;
  %113 = nn.leaky_relu(%112, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %114 = add(%113, %105) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %115 = nn.conv2d(%114, %LAYERTYPE_CONVOLUTIONAL37_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %116 = nn.batch_norm(%115, %LAYERTYPE_CONVOLUTIONAL37_gamma, %LAYERTYPE_CONVOLUTIONAL37_beta, %LAYERTYPE_CONVOLUTIONAL37_moving_mean, %LAYERTYPE_CONVOLUTIONAL37_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %117 = %116.0;
  %118 = nn.leaky_relu(%117, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %119 = nn.conv2d(%118, %LAYERTYPE_CONVOLUTIONAL38_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %120 = nn.batch_norm(%119, %LAYERTYPE_CONVOLUTIONAL38_gamma, %LAYERTYPE_CONVOLUTIONAL38_beta, %LAYERTYPE_CONVOLUTIONAL38_moving_mean, %LAYERTYPE_CONVOLUTIONAL38_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %121 = %120.0;
  %122 = nn.leaky_relu(%121, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %123 = nn.conv2d(%122, %LAYERTYPE_CONVOLUTIONAL39_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %124 = nn.batch_norm(%123, %LAYERTYPE_CONVOLUTIONAL39_gamma, %LAYERTYPE_CONVOLUTIONAL39_beta, %LAYERTYPE_CONVOLUTIONAL39_moving_mean, %LAYERTYPE_CONVOLUTIONAL39_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %125 = %124.0;
  %126 = nn.leaky_relu(%125, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %127 = add(%126, %118) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %128 = nn.conv2d(%127, %LAYERTYPE_CONVOLUTIONAL41_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %129 = nn.batch_norm(%128, %LAYERTYPE_CONVOLUTIONAL41_gamma, %LAYERTYPE_CONVOLUTIONAL41_beta, %LAYERTYPE_CONVOLUTIONAL41_moving_mean, %LAYERTYPE_CONVOLUTIONAL41_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %130 = %129.0;
  %131 = nn.leaky_relu(%130, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %132 = nn.conv2d(%131, %LAYERTYPE_CONVOLUTIONAL42_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %133 = nn.batch_norm(%132, %LAYERTYPE_CONVOLUTIONAL42_gamma, %LAYERTYPE_CONVOLUTIONAL42_beta, %LAYERTYPE_CONVOLUTIONAL42_moving_mean, %LAYERTYPE_CONVOLUTIONAL42_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %134 = %133.0;
  %135 = nn.leaky_relu(%134, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %136 = add(%135, %127) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %137 = nn.conv2d(%136, %LAYERTYPE_CONVOLUTIONAL44_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %138 = nn.batch_norm(%137, %LAYERTYPE_CONVOLUTIONAL44_gamma, %LAYERTYPE_CONVOLUTIONAL44_beta, %LAYERTYPE_CONVOLUTIONAL44_moving_mean, %LAYERTYPE_CONVOLUTIONAL44_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %139 = %138.0;
  %140 = nn.leaky_relu(%139, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %141 = nn.conv2d(%140, %LAYERTYPE_CONVOLUTIONAL45_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %142 = nn.batch_norm(%141, %LAYERTYPE_CONVOLUTIONAL45_gamma, %LAYERTYPE_CONVOLUTIONAL45_beta, %LAYERTYPE_CONVOLUTIONAL45_moving_mean, %LAYERTYPE_CONVOLUTIONAL45_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %143 = %142.0;
  %144 = nn.leaky_relu(%143, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %145 = add(%144, %136) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %146 = nn.conv2d(%145, %LAYERTYPE_CONVOLUTIONAL47_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %147 = nn.batch_norm(%146, %LAYERTYPE_CONVOLUTIONAL47_gamma, %LAYERTYPE_CONVOLUTIONAL47_beta, %LAYERTYPE_CONVOLUTIONAL47_moving_mean, %LAYERTYPE_CONVOLUTIONAL47_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %148 = %147.0;
  %149 = nn.leaky_relu(%148, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %150 = nn.conv2d(%149, %LAYERTYPE_CONVOLUTIONAL48_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %151 = nn.batch_norm(%150, %LAYERTYPE_CONVOLUTIONAL48_gamma, %LAYERTYPE_CONVOLUTIONAL48_beta, %LAYERTYPE_CONVOLUTIONAL48_moving_mean, %LAYERTYPE_CONVOLUTIONAL48_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %152 = %151.0;
  %153 = nn.leaky_relu(%152, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %154 = add(%153, %145) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %155 = nn.conv2d(%154, %LAYERTYPE_CONVOLUTIONAL50_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %156 = nn.batch_norm(%155, %LAYERTYPE_CONVOLUTIONAL50_gamma, %LAYERTYPE_CONVOLUTIONAL50_beta, %LAYERTYPE_CONVOLUTIONAL50_moving_mean, %LAYERTYPE_CONVOLUTIONAL50_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %157 = %156.0;
  %158 = nn.leaky_relu(%157, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %159 = nn.conv2d(%158, %LAYERTYPE_CONVOLUTIONAL51_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %160 = nn.batch_norm(%159, %LAYERTYPE_CONVOLUTIONAL51_gamma, %LAYERTYPE_CONVOLUTIONAL51_beta, %LAYERTYPE_CONVOLUTIONAL51_moving_mean, %LAYERTYPE_CONVOLUTIONAL51_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %161 = %160.0;
  %162 = nn.leaky_relu(%161, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %163 = add(%162, %154) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %164 = nn.conv2d(%163, %LAYERTYPE_CONVOLUTIONAL53_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %165 = nn.batch_norm(%164, %LAYERTYPE_CONVOLUTIONAL53_gamma, %LAYERTYPE_CONVOLUTIONAL53_beta, %LAYERTYPE_CONVOLUTIONAL53_moving_mean, %LAYERTYPE_CONVOLUTIONAL53_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %166 = %165.0;
  %167 = nn.leaky_relu(%166, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %168 = nn.conv2d(%167, %LAYERTYPE_CONVOLUTIONAL54_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %169 = nn.batch_norm(%168, %LAYERTYPE_CONVOLUTIONAL54_gamma, %LAYERTYPE_CONVOLUTIONAL54_beta, %LAYERTYPE_CONVOLUTIONAL54_moving_mean, %LAYERTYPE_CONVOLUTIONAL54_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %170 = %169.0;
  %171 = nn.leaky_relu(%170, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %172 = add(%171, %163) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %173 = nn.conv2d(%172, %LAYERTYPE_CONVOLUTIONAL56_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %174 = nn.batch_norm(%173, %LAYERTYPE_CONVOLUTIONAL56_gamma, %LAYERTYPE_CONVOLUTIONAL56_beta, %LAYERTYPE_CONVOLUTIONAL56_moving_mean, %LAYERTYPE_CONVOLUTIONAL56_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %175 = %174.0;
  %176 = nn.leaky_relu(%175, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %177 = nn.conv2d(%176, %LAYERTYPE_CONVOLUTIONAL57_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %178 = nn.batch_norm(%177, %LAYERTYPE_CONVOLUTIONAL57_gamma, %LAYERTYPE_CONVOLUTIONAL57_beta, %LAYERTYPE_CONVOLUTIONAL57_moving_mean, %LAYERTYPE_CONVOLUTIONAL57_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %179 = %178.0;
  %180 = nn.leaky_relu(%179, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %181 = add(%180, %172) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %182 = nn.conv2d(%181, %LAYERTYPE_CONVOLUTIONAL59_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %183 = nn.batch_norm(%182, %LAYERTYPE_CONVOLUTIONAL59_gamma, %LAYERTYPE_CONVOLUTIONAL59_beta, %LAYERTYPE_CONVOLUTIONAL59_moving_mean, %LAYERTYPE_CONVOLUTIONAL59_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %184 = %183.0;
  %185 = nn.leaky_relu(%184, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %186 = nn.conv2d(%185, %LAYERTYPE_CONVOLUTIONAL60_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %187 = nn.batch_norm(%186, %LAYERTYPE_CONVOLUTIONAL60_gamma, %LAYERTYPE_CONVOLUTIONAL60_beta, %LAYERTYPE_CONVOLUTIONAL60_moving_mean, %LAYERTYPE_CONVOLUTIONAL60_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %188 = %187.0;
  %189 = nn.leaky_relu(%188, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %190 = add(%189, %181) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %191 = nn.conv2d(%190, %LAYERTYPE_CONVOLUTIONAL62_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %192 = nn.batch_norm(%191, %LAYERTYPE_CONVOLUTIONAL62_gamma, %LAYERTYPE_CONVOLUTIONAL62_beta, %LAYERTYPE_CONVOLUTIONAL62_moving_mean, %LAYERTYPE_CONVOLUTIONAL62_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %193 = %192.0;
  %194 = nn.leaky_relu(%193, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %195 = nn.conv2d(%194, %LAYERTYPE_CONVOLUTIONAL63_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %196 = nn.batch_norm(%195, %LAYERTYPE_CONVOLUTIONAL63_gamma, %LAYERTYPE_CONVOLUTIONAL63_beta, %LAYERTYPE_CONVOLUTIONAL63_moving_mean, %LAYERTYPE_CONVOLUTIONAL63_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %197 = %196.0;
  %198 = nn.leaky_relu(%197, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %199 = nn.conv2d(%198, %LAYERTYPE_CONVOLUTIONAL64_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %200 = nn.batch_norm(%199, %LAYERTYPE_CONVOLUTIONAL64_gamma, %LAYERTYPE_CONVOLUTIONAL64_beta, %LAYERTYPE_CONVOLUTIONAL64_moving_mean, %LAYERTYPE_CONVOLUTIONAL64_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %201 = %200.0;
  %202 = nn.leaky_relu(%201, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %203 = add(%202, %194) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %204 = nn.conv2d(%203, %LAYERTYPE_CONVOLUTIONAL66_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %205 = nn.batch_norm(%204, %LAYERTYPE_CONVOLUTIONAL66_gamma, %LAYERTYPE_CONVOLUTIONAL66_beta, %LAYERTYPE_CONVOLUTIONAL66_moving_mean, %LAYERTYPE_CONVOLUTIONAL66_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %206 = %205.0;
  %207 = nn.leaky_relu(%206, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %208 = nn.conv2d(%207, %LAYERTYPE_CONVOLUTIONAL67_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %209 = nn.batch_norm(%208, %LAYERTYPE_CONVOLUTIONAL67_gamma, %LAYERTYPE_CONVOLUTIONAL67_beta, %LAYERTYPE_CONVOLUTIONAL67_moving_mean, %LAYERTYPE_CONVOLUTIONAL67_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %210 = %209.0;
  %211 = nn.leaky_relu(%210, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %212 = add(%211, %203) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %213 = nn.conv2d(%212, %LAYERTYPE_CONVOLUTIONAL69_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %214 = nn.batch_norm(%213, %LAYERTYPE_CONVOLUTIONAL69_gamma, %LAYERTYPE_CONVOLUTIONAL69_beta, %LAYERTYPE_CONVOLUTIONAL69_moving_mean, %LAYERTYPE_CONVOLUTIONAL69_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %215 = %214.0;
  %216 = nn.leaky_relu(%215, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %217 = nn.conv2d(%216, %LAYERTYPE_CONVOLUTIONAL70_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %218 = nn.batch_norm(%217, %LAYERTYPE_CONVOLUTIONAL70_gamma, %LAYERTYPE_CONVOLUTIONAL70_beta, %LAYERTYPE_CONVOLUTIONAL70_moving_mean, %LAYERTYPE_CONVOLUTIONAL70_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %219 = %218.0;
  %220 = nn.leaky_relu(%219, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %221 = add(%220, %212) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %222 = nn.conv2d(%221, %LAYERTYPE_CONVOLUTIONAL72_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %223 = nn.batch_norm(%222, %LAYERTYPE_CONVOLUTIONAL72_gamma, %LAYERTYPE_CONVOLUTIONAL72_beta, %LAYERTYPE_CONVOLUTIONAL72_moving_mean, %LAYERTYPE_CONVOLUTIONAL72_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %224 = %223.0;
  %225 = nn.leaky_relu(%224, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %226 = nn.conv2d(%225, %LAYERTYPE_CONVOLUTIONAL73_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %227 = nn.batch_norm(%226, %LAYERTYPE_CONVOLUTIONAL73_gamma, %LAYERTYPE_CONVOLUTIONAL73_beta, %LAYERTYPE_CONVOLUTIONAL73_moving_mean, %LAYERTYPE_CONVOLUTIONAL73_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %228 = %227.0;
  %229 = nn.leaky_relu(%228, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %230 = add(%229, %221) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %231 = nn.conv2d(%230, %LAYERTYPE_CONVOLUTIONAL75_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %232 = nn.batch_norm(%231, %LAYERTYPE_CONVOLUTIONAL75_gamma, %LAYERTYPE_CONVOLUTIONAL75_beta, %LAYERTYPE_CONVOLUTIONAL75_moving_mean, %LAYERTYPE_CONVOLUTIONAL75_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %233 = %232.0;
  %234 = nn.leaky_relu(%233, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %235 = nn.conv2d(%234, %LAYERTYPE_CONVOLUTIONAL76_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %236 = nn.batch_norm(%235, %LAYERTYPE_CONVOLUTIONAL76_gamma, %LAYERTYPE_CONVOLUTIONAL76_beta, %LAYERTYPE_CONVOLUTIONAL76_moving_mean, %LAYERTYPE_CONVOLUTIONAL76_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %237 = %236.0;
  %238 = nn.leaky_relu(%237, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %239 = nn.conv2d(%238, %LAYERTYPE_CONVOLUTIONAL77_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %240 = nn.batch_norm(%239, %LAYERTYPE_CONVOLUTIONAL77_gamma, %LAYERTYPE_CONVOLUTIONAL77_beta, %LAYERTYPE_CONVOLUTIONAL77_moving_mean, %LAYERTYPE_CONVOLUTIONAL77_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %241 = %240.0;
  %242 = nn.leaky_relu(%241, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %243 = nn.conv2d(%242, %LAYERTYPE_CONVOLUTIONAL78_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %244 = nn.batch_norm(%243, %LAYERTYPE_CONVOLUTIONAL78_gamma, %LAYERTYPE_CONVOLUTIONAL78_beta, %LAYERTYPE_CONVOLUTIONAL78_moving_mean, %LAYERTYPE_CONVOLUTIONAL78_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %245 = %244.0;
  %246 = nn.leaky_relu(%245, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %247 = nn.conv2d(%246, %LAYERTYPE_CONVOLUTIONAL79_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %248 = nn.batch_norm(%247, %LAYERTYPE_CONVOLUTIONAL79_gamma, %LAYERTYPE_CONVOLUTIONAL79_beta, %LAYERTYPE_CONVOLUTIONAL79_moving_mean, %LAYERTYPE_CONVOLUTIONAL79_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %249 = %248.0;
  %250 = nn.leaky_relu(%249, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %251 = nn.conv2d(%250, %LAYERTYPE_CONVOLUTIONAL84_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %252 = nn.batch_norm(%251, %LAYERTYPE_CONVOLUTIONAL84_gamma, %LAYERTYPE_CONVOLUTIONAL84_beta, %LAYERTYPE_CONVOLUTIONAL84_moving_mean, %LAYERTYPE_CONVOLUTIONAL84_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 13, 13), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %253 = %252.0;
  %254 = nn.leaky_relu(%253, alpha=0.1f) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %255 = nn.upsampling(%254, scale_h=2f, scale_w=2f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %256 = (%255, %190);
  %257 = concatenate(%256, axis=1) /* ty=Tensor[(1, 768, 26, 26), float32] */;
  %258 = nn.conv2d(%257, %LAYERTYPE_CONVOLUTIONAL87_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %259 = nn.batch_norm(%258, %LAYERTYPE_CONVOLUTIONAL87_gamma, %LAYERTYPE_CONVOLUTIONAL87_beta, %LAYERTYPE_CONVOLUTIONAL87_moving_mean, %LAYERTYPE_CONVOLUTIONAL87_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %260 = %259.0;
  %261 = nn.leaky_relu(%260, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %262 = nn.conv2d(%261, %LAYERTYPE_CONVOLUTIONAL88_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %263 = nn.batch_norm(%262, %LAYERTYPE_CONVOLUTIONAL88_gamma, %LAYERTYPE_CONVOLUTIONAL88_beta, %LAYERTYPE_CONVOLUTIONAL88_moving_mean, %LAYERTYPE_CONVOLUTIONAL88_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %264 = %263.0;
  %265 = nn.leaky_relu(%264, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %266 = nn.conv2d(%265, %LAYERTYPE_CONVOLUTIONAL89_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %267 = nn.batch_norm(%266, %LAYERTYPE_CONVOLUTIONAL89_gamma, %LAYERTYPE_CONVOLUTIONAL89_beta, %LAYERTYPE_CONVOLUTIONAL89_moving_mean, %LAYERTYPE_CONVOLUTIONAL89_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %268 = %267.0;
  %269 = nn.leaky_relu(%268, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %270 = nn.conv2d(%269, %LAYERTYPE_CONVOLUTIONAL90_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %271 = nn.batch_norm(%270, %LAYERTYPE_CONVOLUTIONAL90_gamma, %LAYERTYPE_CONVOLUTIONAL90_beta, %LAYERTYPE_CONVOLUTIONAL90_moving_mean, %LAYERTYPE_CONVOLUTIONAL90_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %272 = %271.0;
  %273 = nn.leaky_relu(%272, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %274 = nn.conv2d(%273, %LAYERTYPE_CONVOLUTIONAL91_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %275 = nn.batch_norm(%274, %LAYERTYPE_CONVOLUTIONAL91_gamma, %LAYERTYPE_CONVOLUTIONAL91_beta, %LAYERTYPE_CONVOLUTIONAL91_moving_mean, %LAYERTYPE_CONVOLUTIONAL91_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 26, 26), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %276 = %275.0;
  %277 = nn.leaky_relu(%276, alpha=0.1f) /* ty=Tensor[(1, 256, 26, 26), float32] */;
  %278 = nn.conv2d(%277, %LAYERTYPE_CONVOLUTIONAL96_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 26, 26), float32] */;
  %279 = nn.batch_norm(%278, %LAYERTYPE_CONVOLUTIONAL96_gamma, %LAYERTYPE_CONVOLUTIONAL96_beta, %LAYERTYPE_CONVOLUTIONAL96_moving_mean, %LAYERTYPE_CONVOLUTIONAL96_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 26, 26), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %280 = %279.0;
  %281 = nn.leaky_relu(%280, alpha=0.1f) /* ty=Tensor[(1, 128, 26, 26), float32] */;
  %282 = nn.upsampling(%281, scale_h=2f, scale_w=2f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %283 = (%282, %114);
  %284 = concatenate(%283, axis=1) /* ty=Tensor[(1, 384, 52, 52), float32] */;
  %285 = nn.conv2d(%284, %LAYERTYPE_CONVOLUTIONAL99_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %286 = nn.batch_norm(%285, %LAYERTYPE_CONVOLUTIONAL99_gamma, %LAYERTYPE_CONVOLUTIONAL99_beta, %LAYERTYPE_CONVOLUTIONAL99_moving_mean, %LAYERTYPE_CONVOLUTIONAL99_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %287 = %286.0;
  %288 = nn.leaky_relu(%287, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %289 = nn.conv2d(%288, %LAYERTYPE_CONVOLUTIONAL100_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %290 = nn.batch_norm(%289, %LAYERTYPE_CONVOLUTIONAL100_gamma, %LAYERTYPE_CONVOLUTIONAL100_beta, %LAYERTYPE_CONVOLUTIONAL100_moving_mean, %LAYERTYPE_CONVOLUTIONAL100_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %291 = %290.0;
  %292 = nn.leaky_relu(%291, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %293 = nn.conv2d(%292, %LAYERTYPE_CONVOLUTIONAL101_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %294 = nn.batch_norm(%293, %LAYERTYPE_CONVOLUTIONAL101_gamma, %LAYERTYPE_CONVOLUTIONAL101_beta, %LAYERTYPE_CONVOLUTIONAL101_moving_mean, %LAYERTYPE_CONVOLUTIONAL101_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %295 = %294.0;
  %296 = nn.leaky_relu(%295, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %297 = nn.conv2d(%296, %LAYERTYPE_CONVOLUTIONAL102_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %298 = nn.batch_norm(%297, %LAYERTYPE_CONVOLUTIONAL102_gamma, %LAYERTYPE_CONVOLUTIONAL102_beta, %LAYERTYPE_CONVOLUTIONAL102_moving_mean, %LAYERTYPE_CONVOLUTIONAL102_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %299 = %298.0;
  %300 = nn.leaky_relu(%299, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %301 = nn.conv2d(%300, %LAYERTYPE_CONVOLUTIONAL103_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %302 = nn.batch_norm(%301, %LAYERTYPE_CONVOLUTIONAL103_gamma, %LAYERTYPE_CONVOLUTIONAL103_beta, %LAYERTYPE_CONVOLUTIONAL103_moving_mean, %LAYERTYPE_CONVOLUTIONAL103_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 128, 52, 52), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %303 = %302.0;
  %304 = nn.leaky_relu(%303, alpha=0.1f) /* ty=Tensor[(1, 128, 52, 52), float32] */;
  %305 = nn.conv2d(%304, %LAYERTYPE_CONVOLUTIONAL104_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %306 = nn.batch_norm(%305, %LAYERTYPE_CONVOLUTIONAL104_gamma, %LAYERTYPE_CONVOLUTIONAL104_beta, %LAYERTYPE_CONVOLUTIONAL104_moving_mean, %LAYERTYPE_CONVOLUTIONAL104_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 256, 52, 52), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %307 = %306.0;
  %308 = nn.leaky_relu(%307, alpha=0.1f) /* ty=Tensor[(1, 256, 52, 52), float32] */;
  %309 = nn.conv2d(%308, %LAYERTYPE_CONVOLUTIONAL105_weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 52, 52), float32] */;
  %310 = nn.bias_add(%309, %LAYERTYPE_CONVOLUTIONAL105_bias) /* ty=Tensor[(1, 255, 52, 52), float32] */;
  %311 = reshape(%310, newshape=[-1, 3, 85, 52, 52]) /* ty=Tensor[(1, 3, 85, 52, 52), float32] */;
  %312 = split(%311, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 52, 52), float32], Tensor[(1, 3, 2, 52, 52), float32], Tensor[(1, 3, 81, 52, 52), float32]) */;
  %313 = %312.0;
  %314 = sigmoid(%313) /* ty=Tensor[(1, 3, 2, 52, 52), float32] */;
  %315 = %312.1;
  %316 = %312.2;
  %317 = sigmoid(%316) /* ty=Tensor[(1, 3, 81, 52, 52), float32] */;
  %318 = (%314, %315, %317);
  %319 = concatenate(%318, axis=2) /* ty=Tensor[(1, 3, 85, 52, 52), float32] */;
  %320 = reshape(%319, newshape=[-1, 255, 52, 52]) /* ty=Tensor[(1, 255, 52, 52), float32] */;
  %321 = nn.conv2d(%277, %LAYERTYPE_CONVOLUTIONAL92_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %322 = nn.batch_norm(%321, %LAYERTYPE_CONVOLUTIONAL92_gamma, %LAYERTYPE_CONVOLUTIONAL92_beta, %LAYERTYPE_CONVOLUTIONAL92_moving_mean, %LAYERTYPE_CONVOLUTIONAL92_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %323 = %322.0;
  %324 = nn.leaky_relu(%323, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %325 = nn.conv2d(%324, %LAYERTYPE_CONVOLUTIONAL93_weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 26, 26), float32] */;
  %326 = nn.bias_add(%325, %LAYERTYPE_CONVOLUTIONAL93_bias) /* ty=Tensor[(1, 255, 26, 26), float32] */;
  %327 = reshape(%326, newshape=[-1, 3, 85, 26, 26]) /* ty=Tensor[(1, 3, 85, 26, 26), float32] */;
  %328 = split(%327, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 26, 26), float32], Tensor[(1, 3, 2, 26, 26), float32], Tensor[(1, 3, 81, 26, 26), float32]) */;
  %329 = %328.0;
  %330 = sigmoid(%329) /* ty=Tensor[(1, 3, 2, 26, 26), float32] */;
  %331 = %328.1;
  %332 = %328.2;
  %333 = sigmoid(%332) /* ty=Tensor[(1, 3, 81, 26, 26), float32] */;
  %334 = (%330, %331, %333);
  %335 = concatenate(%334, axis=2) /* ty=Tensor[(1, 3, 85, 26, 26), float32] */;
  %336 = reshape(%335, newshape=[-1, 255, 26, 26]) /* ty=Tensor[(1, 255, 26, 26), float32] */;
  %337 = nn.conv2d(%250, %LAYERTYPE_CONVOLUTIONAL80_weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %338 = nn.batch_norm(%337, %LAYERTYPE_CONVOLUTIONAL80_gamma, %LAYERTYPE_CONVOLUTIONAL80_beta, %LAYERTYPE_CONVOLUTIONAL80_moving_mean, %LAYERTYPE_CONVOLUTIONAL80_moving_var, epsilon=1e-06f) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %339 = %338.0;
  %340 = nn.leaky_relu(%339, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %341 = nn.conv2d(%340, %LAYERTYPE_CONVOLUTIONAL81_weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 13, 13), float32] */;
  %342 = nn.bias_add(%341, %LAYERTYPE_CONVOLUTIONAL81_bias) /* ty=Tensor[(1, 255, 13, 13), float32] */;
  %343 = reshape(%342, newshape=[-1, 3, 85, 13, 13]) /* ty=Tensor[(1, 3, 85, 13, 13), float32] */;
  %344 = split(%343, indices_or_sections=[2, 4], axis=2) /* ty=(Tensor[(1, 3, 2, 13, 13), float32], Tensor[(1, 3, 2, 13, 13), float32], Tensor[(1, 3, 81, 13, 13), float32]) */;
  %345 = %344.0;
  %346 = sigmoid(%345) /* ty=Tensor[(1, 3, 2, 13, 13), float32] */;
  %347 = %344.1;
  %348 = %344.2;
  %349 = sigmoid(%348) /* ty=Tensor[(1, 3, 81, 13, 13), float32] */;
  %350 = (%346, %347, %349);
  %351 = concatenate(%350, axis=2) /* ty=Tensor[(1, 3, 85, 13, 13), float32] */;
  %352 = reshape(%351, newshape=[-1, 255, 13, 13]) /* ty=Tensor[(1, 255, 13, 13), float32] */;
  (%320, %LAYERTYPE_YOLO106_mask, %LAYERTYPE_YOLO106_bias, %LAYERTYPE_YOLO106_attr, %336, %LAYERTYPE_YOLO94_mask, %LAYERTYPE_YOLO94_bias, %LAYERTYPE_YOLO94_attr, %352, %LAYERTYPE_YOLO82_mask, %LAYERTYPE_YOLO82_bias, %LAYERTYPE_YOLO82_attr)
}
